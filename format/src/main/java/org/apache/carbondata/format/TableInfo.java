/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class TableInfo implements org.apache.thrift.TBase<TableInfo, TableInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TableInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableInfo");

  private static final org.apache.thrift.protocol.TField FACT_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fact_table", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField AGGREGATE_TABLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_table_list", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_MAP_SCHEMAS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMapSchemas", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TableInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TableInfoTupleSchemeFactory());
  }

  public TableSchema fact_table; // required
  public List<TableSchema> aggregate_table_list; // required
  public List<DataMapSchema> dataMapSchemas; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FACT_TABLE((short)1, "fact_table"),
    AGGREGATE_TABLE_LIST((short)2, "aggregate_table_list"),
    DATA_MAP_SCHEMAS((short)3, "dataMapSchemas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FACT_TABLE
          return FACT_TABLE;
        case 2: // AGGREGATE_TABLE_LIST
          return AGGREGATE_TABLE_LIST;
        case 3: // DATA_MAP_SCHEMAS
          return DATA_MAP_SCHEMAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DATA_MAP_SCHEMAS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FACT_TABLE, new org.apache.thrift.meta_data.FieldMetaData("fact_table", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableSchema.class)));
    tmpMap.put(_Fields.AGGREGATE_TABLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("aggregate_table_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableSchema.class))));
    tmpMap.put(_Fields.DATA_MAP_SCHEMAS, new org.apache.thrift.meta_data.FieldMetaData("dataMapSchemas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataMapSchema.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableInfo.class, metaDataMap);
  }

  public TableInfo() {
  }

  public TableInfo(
    TableSchema fact_table,
    List<TableSchema> aggregate_table_list)
  {
    this();
    this.fact_table = fact_table;
    this.aggregate_table_list = aggregate_table_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableInfo(TableInfo other) {
    if (other.isSetFact_table()) {
      this.fact_table = new TableSchema(other.fact_table);
    }
    if (other.isSetAggregate_table_list()) {
      List<TableSchema> __this__aggregate_table_list = new ArrayList<TableSchema>(other.aggregate_table_list.size());
      for (TableSchema other_element : other.aggregate_table_list) {
        __this__aggregate_table_list.add(new TableSchema(other_element));
      }
      this.aggregate_table_list = __this__aggregate_table_list;
    }
    if (other.isSetDataMapSchemas()) {
      List<DataMapSchema> __this__dataMapSchemas = new ArrayList<DataMapSchema>(other.dataMapSchemas.size());
      for (DataMapSchema other_element : other.dataMapSchemas) {
        __this__dataMapSchemas.add(new DataMapSchema(other_element));
      }
      this.dataMapSchemas = __this__dataMapSchemas;
    }
  }

  public TableInfo deepCopy() {
    return new TableInfo(this);
  }

  @Override
  public void clear() {
    this.fact_table = null;
    this.aggregate_table_list = null;
    this.dataMapSchemas = null;
  }

  public TableSchema getFact_table() {
    return this.fact_table;
  }

  public TableInfo setFact_table(TableSchema fact_table) {
    this.fact_table = fact_table;
    return this;
  }

  public void unsetFact_table() {
    this.fact_table = null;
  }

  /** Returns true if field fact_table is set (has been assigned a value) and false otherwise */
  public boolean isSetFact_table() {
    return this.fact_table != null;
  }

  public void setFact_tableIsSet(boolean value) {
    if (!value) {
      this.fact_table = null;
    }
  }

  public int getAggregate_table_listSize() {
    return (this.aggregate_table_list == null) ? 0 : this.aggregate_table_list.size();
  }

  public java.util.Iterator<TableSchema> getAggregate_table_listIterator() {
    return (this.aggregate_table_list == null) ? null : this.aggregate_table_list.iterator();
  }

  public void addToAggregate_table_list(TableSchema elem) {
    if (this.aggregate_table_list == null) {
      this.aggregate_table_list = new ArrayList<TableSchema>();
    }
    this.aggregate_table_list.add(elem);
  }

  public List<TableSchema> getAggregate_table_list() {
    return this.aggregate_table_list;
  }

  public TableInfo setAggregate_table_list(List<TableSchema> aggregate_table_list) {
    this.aggregate_table_list = aggregate_table_list;
    return this;
  }

  public void unsetAggregate_table_list() {
    this.aggregate_table_list = null;
  }

  /** Returns true if field aggregate_table_list is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_table_list() {
    return this.aggregate_table_list != null;
  }

  public void setAggregate_table_listIsSet(boolean value) {
    if (!value) {
      this.aggregate_table_list = null;
    }
  }

  public int getDataMapSchemasSize() {
    return (this.dataMapSchemas == null) ? 0 : this.dataMapSchemas.size();
  }

  public java.util.Iterator<DataMapSchema> getDataMapSchemasIterator() {
    return (this.dataMapSchemas == null) ? null : this.dataMapSchemas.iterator();
  }

  public void addToDataMapSchemas(DataMapSchema elem) {
    if (this.dataMapSchemas == null) {
      this.dataMapSchemas = new ArrayList<DataMapSchema>();
    }
    this.dataMapSchemas.add(elem);
  }

  public List<DataMapSchema> getDataMapSchemas() {
    return this.dataMapSchemas;
  }

  public TableInfo setDataMapSchemas(List<DataMapSchema> dataMapSchemas) {
    this.dataMapSchemas = dataMapSchemas;
    return this;
  }

  public void unsetDataMapSchemas() {
    this.dataMapSchemas = null;
  }

  /** Returns true if field dataMapSchemas is set (has been assigned a value) and false otherwise */
  public boolean isSetDataMapSchemas() {
    return this.dataMapSchemas != null;
  }

  public void setDataMapSchemasIsSet(boolean value) {
    if (!value) {
      this.dataMapSchemas = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FACT_TABLE:
      if (value == null) {
        unsetFact_table();
      } else {
        setFact_table((TableSchema)value);
      }
      break;

    case AGGREGATE_TABLE_LIST:
      if (value == null) {
        unsetAggregate_table_list();
      } else {
        setAggregate_table_list((List<TableSchema>)value);
      }
      break;

    case DATA_MAP_SCHEMAS:
      if (value == null) {
        unsetDataMapSchemas();
      } else {
        setDataMapSchemas((List<DataMapSchema>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FACT_TABLE:
      return getFact_table();

    case AGGREGATE_TABLE_LIST:
      return getAggregate_table_list();

    case DATA_MAP_SCHEMAS:
      return getDataMapSchemas();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FACT_TABLE:
      return isSetFact_table();
    case AGGREGATE_TABLE_LIST:
      return isSetAggregate_table_list();
    case DATA_MAP_SCHEMAS:
      return isSetDataMapSchemas();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TableInfo)
      return this.equals((TableInfo)that);
    return false;
  }

  public boolean equals(TableInfo that) {
    if (that == null)
      return false;

    boolean this_present_fact_table = true && this.isSetFact_table();
    boolean that_present_fact_table = true && that.isSetFact_table();
    if (this_present_fact_table || that_present_fact_table) {
      if (!(this_present_fact_table && that_present_fact_table))
        return false;
      if (!this.fact_table.equals(that.fact_table))
        return false;
    }

    boolean this_present_aggregate_table_list = true && this.isSetAggregate_table_list();
    boolean that_present_aggregate_table_list = true && that.isSetAggregate_table_list();
    if (this_present_aggregate_table_list || that_present_aggregate_table_list) {
      if (!(this_present_aggregate_table_list && that_present_aggregate_table_list))
        return false;
      if (!this.aggregate_table_list.equals(that.aggregate_table_list))
        return false;
    }

    boolean this_present_dataMapSchemas = true && this.isSetDataMapSchemas();
    boolean that_present_dataMapSchemas = true && that.isSetDataMapSchemas();
    if (this_present_dataMapSchemas || that_present_dataMapSchemas) {
      if (!(this_present_dataMapSchemas && that_present_dataMapSchemas))
        return false;
      if (!this.dataMapSchemas.equals(that.dataMapSchemas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fact_table = true && (isSetFact_table());
    list.add(present_fact_table);
    if (present_fact_table)
      list.add(fact_table);

    boolean present_aggregate_table_list = true && (isSetAggregate_table_list());
    list.add(present_aggregate_table_list);
    if (present_aggregate_table_list)
      list.add(aggregate_table_list);

    boolean present_dataMapSchemas = true && (isSetDataMapSchemas());
    list.add(present_dataMapSchemas);
    if (present_dataMapSchemas)
      list.add(dataMapSchemas);

    return list.hashCode();
  }

  @Override
  public int compareTo(TableInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFact_table()).compareTo(other.isSetFact_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFact_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fact_table, other.fact_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregate_table_list()).compareTo(other.isSetAggregate_table_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_table_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_table_list, other.aggregate_table_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataMapSchemas()).compareTo(other.isSetDataMapSchemas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataMapSchemas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMapSchemas, other.dataMapSchemas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TableInfo(");
    boolean first = true;

    sb.append("fact_table:");
    if (this.fact_table == null) {
      sb.append("null");
    } else {
      sb.append(this.fact_table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregate_table_list:");
    if (this.aggregate_table_list == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregate_table_list);
    }
    first = false;
    if (isSetDataMapSchemas()) {
      if (!first) sb.append(", ");
      sb.append("dataMapSchemas:");
      if (this.dataMapSchemas == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMapSchemas);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fact_table == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fact_table' was not present! Struct: " + toString());
    }
    if (aggregate_table_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregate_table_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fact_table != null) {
      fact_table.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableInfoStandardSchemeFactory implements SchemeFactory {
    public TableInfoStandardScheme getScheme() {
      return new TableInfoStandardScheme();
    }
  }

  private static class TableInfoStandardScheme extends StandardScheme<TableInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TableInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FACT_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fact_table = new TableSchema();
              struct.fact_table.read(iprot);
              struct.setFact_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGREGATE_TABLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                struct.aggregate_table_list = new ArrayList<TableSchema>(_list134.size);
                TableSchema _elem135;
                for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                {
                  _elem135 = new TableSchema();
                  _elem135.read(iprot);
                  struct.aggregate_table_list.add(_elem135);
                }
                iprot.readListEnd();
              }
              struct.setAggregate_table_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_MAP_SCHEMAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list137 = iprot.readListBegin();
                struct.dataMapSchemas = new ArrayList<DataMapSchema>(_list137.size);
                DataMapSchema _elem138;
                for (int _i139 = 0; _i139 < _list137.size; ++_i139)
                {
                  _elem138 = new DataMapSchema();
                  _elem138.read(iprot);
                  struct.dataMapSchemas.add(_elem138);
                }
                iprot.readListEnd();
              }
              struct.setDataMapSchemasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TableInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fact_table != null) {
        oprot.writeFieldBegin(FACT_TABLE_FIELD_DESC);
        struct.fact_table.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.aggregate_table_list != null) {
        oprot.writeFieldBegin(AGGREGATE_TABLE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregate_table_list.size()));
          for (TableSchema _iter140 : struct.aggregate_table_list)
          {
            _iter140.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dataMapSchemas != null) {
        if (struct.isSetDataMapSchemas()) {
          oprot.writeFieldBegin(DATA_MAP_SCHEMAS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataMapSchemas.size()));
            for (DataMapSchema _iter141 : struct.dataMapSchemas)
            {
              _iter141.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableInfoTupleSchemeFactory implements SchemeFactory {
    public TableInfoTupleScheme getScheme() {
      return new TableInfoTupleScheme();
    }
  }

  private static class TableInfoTupleScheme extends TupleScheme<TableInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TableInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fact_table.write(oprot);
      {
        oprot.writeI32(struct.aggregate_table_list.size());
        for (TableSchema _iter142 : struct.aggregate_table_list)
        {
          _iter142.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetDataMapSchemas()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDataMapSchemas()) {
        {
          oprot.writeI32(struct.dataMapSchemas.size());
          for (DataMapSchema _iter143 : struct.dataMapSchemas)
          {
            _iter143.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fact_table = new TableSchema();
      struct.fact_table.read(iprot);
      struct.setFact_tableIsSet(true);
      {
        org.apache.thrift.protocol.TList _list144 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.aggregate_table_list = new ArrayList<TableSchema>(_list144.size);
        TableSchema _elem145;
        for (int _i146 = 0; _i146 < _list144.size; ++_i146)
        {
          _elem145 = new TableSchema();
          _elem145.read(iprot);
          struct.aggregate_table_list.add(_elem145);
        }
      }
      struct.setAggregate_table_listIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list147 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dataMapSchemas = new ArrayList<DataMapSchema>(_list147.size);
          DataMapSchema _elem148;
          for (int _i149 = 0; _i149 < _list147.size; ++_i149)
          {
            _elem148 = new DataMapSchema();
            _elem148.read(iprot);
            struct.dataMapSchemas.add(_elem148);
          }
        }
        struct.setDataMapSchemasIsSet(true);
      }
    }
  }

}

