/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Information about a blocklet for V3 format
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class BlockletInfo3 implements org.apache.thrift.TBase<BlockletInfo3, BlockletInfo3._Fields>, java.io.Serializable, Cloneable, Comparable<BlockletInfo3> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockletInfo3");

  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_DATA_CHUNKS_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_data_chunks_offsets", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_DATA_CHUNKS_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("column_data_chunks_length", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DIMENSION_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("dimension_offsets", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MEASURE_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("measure_offsets", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER_NUMBER_OF_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("number_number_of_pages", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_IN_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count_in_page", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockletInfo3StandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockletInfo3TupleSchemeFactory());
  }

  public int num_rows; // required
  public List<Long> column_data_chunks_offsets; // required
  public List<Integer> column_data_chunks_length; // required
  public long dimension_offsets; // required
  public long measure_offsets; // required
  public int number_number_of_pages; // required
  public List<Integer> row_count_in_page; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_ROWS((short)1, "num_rows"),
    COLUMN_DATA_CHUNKS_OFFSETS((short)2, "column_data_chunks_offsets"),
    COLUMN_DATA_CHUNKS_LENGTH((short)3, "column_data_chunks_length"),
    DIMENSION_OFFSETS((short)4, "dimension_offsets"),
    MEASURE_OFFSETS((short)5, "measure_offsets"),
    NUMBER_NUMBER_OF_PAGES((short)6, "number_number_of_pages"),
    ROW_COUNT_IN_PAGE((short)7, "row_count_in_page");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_ROWS
          return NUM_ROWS;
        case 2: // COLUMN_DATA_CHUNKS_OFFSETS
          return COLUMN_DATA_CHUNKS_OFFSETS;
        case 3: // COLUMN_DATA_CHUNKS_LENGTH
          return COLUMN_DATA_CHUNKS_LENGTH;
        case 4: // DIMENSION_OFFSETS
          return DIMENSION_OFFSETS;
        case 5: // MEASURE_OFFSETS
          return MEASURE_OFFSETS;
        case 6: // NUMBER_NUMBER_OF_PAGES
          return NUMBER_NUMBER_OF_PAGES;
        case 7: // ROW_COUNT_IN_PAGE
          return ROW_COUNT_IN_PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ROWS_ISSET_ID = 0;
  private static final int __DIMENSION_OFFSETS_ISSET_ID = 1;
  private static final int __MEASURE_OFFSETS_ISSET_ID = 2;
  private static final int __NUMBER_NUMBER_OF_PAGES_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROW_COUNT_IN_PAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_DATA_CHUNKS_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("column_data_chunks_offsets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COLUMN_DATA_CHUNKS_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("column_data_chunks_length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DIMENSION_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("dimension_offsets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEASURE_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("measure_offsets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUMBER_NUMBER_OF_PAGES, new org.apache.thrift.meta_data.FieldMetaData("number_number_of_pages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROW_COUNT_IN_PAGE, new org.apache.thrift.meta_data.FieldMetaData("row_count_in_page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockletInfo3.class, metaDataMap);
  }

  public BlockletInfo3() {
  }

  public BlockletInfo3(
    int num_rows,
    List<Long> column_data_chunks_offsets,
    List<Integer> column_data_chunks_length,
    long dimension_offsets,
    long measure_offsets,
    int number_number_of_pages)
  {
    this();
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    this.column_data_chunks_offsets = column_data_chunks_offsets;
    this.column_data_chunks_length = column_data_chunks_length;
    this.dimension_offsets = dimension_offsets;
    setDimension_offsetsIsSet(true);
    this.measure_offsets = measure_offsets;
    setMeasure_offsetsIsSet(true);
    this.number_number_of_pages = number_number_of_pages;
    setNumber_number_of_pagesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockletInfo3(BlockletInfo3 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_rows = other.num_rows;
    if (other.isSetColumn_data_chunks_offsets()) {
      List<Long> __this__column_data_chunks_offsets = new ArrayList<Long>(other.column_data_chunks_offsets);
      this.column_data_chunks_offsets = __this__column_data_chunks_offsets;
    }
    if (other.isSetColumn_data_chunks_length()) {
      List<Integer> __this__column_data_chunks_length = new ArrayList<Integer>(other.column_data_chunks_length);
      this.column_data_chunks_length = __this__column_data_chunks_length;
    }
    this.dimension_offsets = other.dimension_offsets;
    this.measure_offsets = other.measure_offsets;
    this.number_number_of_pages = other.number_number_of_pages;
    if (other.isSetRow_count_in_page()) {
      List<Integer> __this__row_count_in_page = new ArrayList<Integer>(other.row_count_in_page);
      this.row_count_in_page = __this__row_count_in_page;
    }
  }

  public BlockletInfo3 deepCopy() {
    return new BlockletInfo3(this);
  }

  @Override
  public void clear() {
    setNum_rowsIsSet(false);
    this.num_rows = 0;
    this.column_data_chunks_offsets = null;
    this.column_data_chunks_length = null;
    setDimension_offsetsIsSet(false);
    this.dimension_offsets = 0;
    setMeasure_offsetsIsSet(false);
    this.measure_offsets = 0;
    setNumber_number_of_pagesIsSet(false);
    this.number_number_of_pages = 0;
    this.row_count_in_page = null;
  }

  public int getNum_rows() {
    return this.num_rows;
  }

  public BlockletInfo3 setNum_rows(int num_rows) {
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    return this;
  }

  public void unsetNum_rows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  public void setNum_rowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
  }

  public int getColumn_data_chunks_offsetsSize() {
    return (this.column_data_chunks_offsets == null) ? 0 : this.column_data_chunks_offsets.size();
  }

  public java.util.Iterator<Long> getColumn_data_chunks_offsetsIterator() {
    return (this.column_data_chunks_offsets == null) ? null : this.column_data_chunks_offsets.iterator();
  }

  public void addToColumn_data_chunks_offsets(long elem) {
    if (this.column_data_chunks_offsets == null) {
      this.column_data_chunks_offsets = new ArrayList<Long>();
    }
    this.column_data_chunks_offsets.add(elem);
  }

  public List<Long> getColumn_data_chunks_offsets() {
    return this.column_data_chunks_offsets;
  }

  public BlockletInfo3 setColumn_data_chunks_offsets(List<Long> column_data_chunks_offsets) {
    this.column_data_chunks_offsets = column_data_chunks_offsets;
    return this;
  }

  public void unsetColumn_data_chunks_offsets() {
    this.column_data_chunks_offsets = null;
  }

  /** Returns true if field column_data_chunks_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_data_chunks_offsets() {
    return this.column_data_chunks_offsets != null;
  }

  public void setColumn_data_chunks_offsetsIsSet(boolean value) {
    if (!value) {
      this.column_data_chunks_offsets = null;
    }
  }

  public int getColumn_data_chunks_lengthSize() {
    return (this.column_data_chunks_length == null) ? 0 : this.column_data_chunks_length.size();
  }

  public java.util.Iterator<Integer> getColumn_data_chunks_lengthIterator() {
    return (this.column_data_chunks_length == null) ? null : this.column_data_chunks_length.iterator();
  }

  public void addToColumn_data_chunks_length(int elem) {
    if (this.column_data_chunks_length == null) {
      this.column_data_chunks_length = new ArrayList<Integer>();
    }
    this.column_data_chunks_length.add(elem);
  }

  public List<Integer> getColumn_data_chunks_length() {
    return this.column_data_chunks_length;
  }

  public BlockletInfo3 setColumn_data_chunks_length(List<Integer> column_data_chunks_length) {
    this.column_data_chunks_length = column_data_chunks_length;
    return this;
  }

  public void unsetColumn_data_chunks_length() {
    this.column_data_chunks_length = null;
  }

  /** Returns true if field column_data_chunks_length is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_data_chunks_length() {
    return this.column_data_chunks_length != null;
  }

  public void setColumn_data_chunks_lengthIsSet(boolean value) {
    if (!value) {
      this.column_data_chunks_length = null;
    }
  }

  public long getDimension_offsets() {
    return this.dimension_offsets;
  }

  public BlockletInfo3 setDimension_offsets(long dimension_offsets) {
    this.dimension_offsets = dimension_offsets;
    setDimension_offsetsIsSet(true);
    return this;
  }

  public void unsetDimension_offsets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIMENSION_OFFSETS_ISSET_ID);
  }

  /** Returns true if field dimension_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetDimension_offsets() {
    return EncodingUtils.testBit(__isset_bitfield, __DIMENSION_OFFSETS_ISSET_ID);
  }

  public void setDimension_offsetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIMENSION_OFFSETS_ISSET_ID, value);
  }

  public long getMeasure_offsets() {
    return this.measure_offsets;
  }

  public BlockletInfo3 setMeasure_offsets(long measure_offsets) {
    this.measure_offsets = measure_offsets;
    setMeasure_offsetsIsSet(true);
    return this;
  }

  public void unsetMeasure_offsets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEASURE_OFFSETS_ISSET_ID);
  }

  /** Returns true if field measure_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasure_offsets() {
    return EncodingUtils.testBit(__isset_bitfield, __MEASURE_OFFSETS_ISSET_ID);
  }

  public void setMeasure_offsetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEASURE_OFFSETS_ISSET_ID, value);
  }

  public int getNumber_number_of_pages() {
    return this.number_number_of_pages;
  }

  public BlockletInfo3 setNumber_number_of_pages(int number_number_of_pages) {
    this.number_number_of_pages = number_number_of_pages;
    setNumber_number_of_pagesIsSet(true);
    return this;
  }

  public void unsetNumber_number_of_pages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_NUMBER_OF_PAGES_ISSET_ID);
  }

  /** Returns true if field number_number_of_pages is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber_number_of_pages() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_NUMBER_OF_PAGES_ISSET_ID);
  }

  public void setNumber_number_of_pagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_NUMBER_OF_PAGES_ISSET_ID, value);
  }

  public int getRow_count_in_pageSize() {
    return (this.row_count_in_page == null) ? 0 : this.row_count_in_page.size();
  }

  public java.util.Iterator<Integer> getRow_count_in_pageIterator() {
    return (this.row_count_in_page == null) ? null : this.row_count_in_page.iterator();
  }

  public void addToRow_count_in_page(int elem) {
    if (this.row_count_in_page == null) {
      this.row_count_in_page = new ArrayList<Integer>();
    }
    this.row_count_in_page.add(elem);
  }

  public List<Integer> getRow_count_in_page() {
    return this.row_count_in_page;
  }

  public BlockletInfo3 setRow_count_in_page(List<Integer> row_count_in_page) {
    this.row_count_in_page = row_count_in_page;
    return this;
  }

  public void unsetRow_count_in_page() {
    this.row_count_in_page = null;
  }

  /** Returns true if field row_count_in_page is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count_in_page() {
    return this.row_count_in_page != null;
  }

  public void setRow_count_in_pageIsSet(boolean value) {
    if (!value) {
      this.row_count_in_page = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_ROWS:
      if (value == null) {
        unsetNum_rows();
      } else {
        setNum_rows((Integer)value);
      }
      break;

    case COLUMN_DATA_CHUNKS_OFFSETS:
      if (value == null) {
        unsetColumn_data_chunks_offsets();
      } else {
        setColumn_data_chunks_offsets((List<Long>)value);
      }
      break;

    case COLUMN_DATA_CHUNKS_LENGTH:
      if (value == null) {
        unsetColumn_data_chunks_length();
      } else {
        setColumn_data_chunks_length((List<Integer>)value);
      }
      break;

    case DIMENSION_OFFSETS:
      if (value == null) {
        unsetDimension_offsets();
      } else {
        setDimension_offsets((Long)value);
      }
      break;

    case MEASURE_OFFSETS:
      if (value == null) {
        unsetMeasure_offsets();
      } else {
        setMeasure_offsets((Long)value);
      }
      break;

    case NUMBER_NUMBER_OF_PAGES:
      if (value == null) {
        unsetNumber_number_of_pages();
      } else {
        setNumber_number_of_pages((Integer)value);
      }
      break;

    case ROW_COUNT_IN_PAGE:
      if (value == null) {
        unsetRow_count_in_page();
      } else {
        setRow_count_in_page((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_ROWS:
      return getNum_rows();

    case COLUMN_DATA_CHUNKS_OFFSETS:
      return getColumn_data_chunks_offsets();

    case COLUMN_DATA_CHUNKS_LENGTH:
      return getColumn_data_chunks_length();

    case DIMENSION_OFFSETS:
      return getDimension_offsets();

    case MEASURE_OFFSETS:
      return getMeasure_offsets();

    case NUMBER_NUMBER_OF_PAGES:
      return getNumber_number_of_pages();

    case ROW_COUNT_IN_PAGE:
      return getRow_count_in_page();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_ROWS:
      return isSetNum_rows();
    case COLUMN_DATA_CHUNKS_OFFSETS:
      return isSetColumn_data_chunks_offsets();
    case COLUMN_DATA_CHUNKS_LENGTH:
      return isSetColumn_data_chunks_length();
    case DIMENSION_OFFSETS:
      return isSetDimension_offsets();
    case MEASURE_OFFSETS:
      return isSetMeasure_offsets();
    case NUMBER_NUMBER_OF_PAGES:
      return isSetNumber_number_of_pages();
    case ROW_COUNT_IN_PAGE:
      return isSetRow_count_in_page();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockletInfo3)
      return this.equals((BlockletInfo3)that);
    return false;
  }

  public boolean equals(BlockletInfo3 that) {
    if (that == null)
      return false;

    boolean this_present_num_rows = true;
    boolean that_present_num_rows = true;
    if (this_present_num_rows || that_present_num_rows) {
      if (!(this_present_num_rows && that_present_num_rows))
        return false;
      if (this.num_rows != that.num_rows)
        return false;
    }

    boolean this_present_column_data_chunks_offsets = true && this.isSetColumn_data_chunks_offsets();
    boolean that_present_column_data_chunks_offsets = true && that.isSetColumn_data_chunks_offsets();
    if (this_present_column_data_chunks_offsets || that_present_column_data_chunks_offsets) {
      if (!(this_present_column_data_chunks_offsets && that_present_column_data_chunks_offsets))
        return false;
      if (!this.column_data_chunks_offsets.equals(that.column_data_chunks_offsets))
        return false;
    }

    boolean this_present_column_data_chunks_length = true && this.isSetColumn_data_chunks_length();
    boolean that_present_column_data_chunks_length = true && that.isSetColumn_data_chunks_length();
    if (this_present_column_data_chunks_length || that_present_column_data_chunks_length) {
      if (!(this_present_column_data_chunks_length && that_present_column_data_chunks_length))
        return false;
      if (!this.column_data_chunks_length.equals(that.column_data_chunks_length))
        return false;
    }

    boolean this_present_dimension_offsets = true;
    boolean that_present_dimension_offsets = true;
    if (this_present_dimension_offsets || that_present_dimension_offsets) {
      if (!(this_present_dimension_offsets && that_present_dimension_offsets))
        return false;
      if (this.dimension_offsets != that.dimension_offsets)
        return false;
    }

    boolean this_present_measure_offsets = true;
    boolean that_present_measure_offsets = true;
    if (this_present_measure_offsets || that_present_measure_offsets) {
      if (!(this_present_measure_offsets && that_present_measure_offsets))
        return false;
      if (this.measure_offsets != that.measure_offsets)
        return false;
    }

    boolean this_present_number_number_of_pages = true;
    boolean that_present_number_number_of_pages = true;
    if (this_present_number_number_of_pages || that_present_number_number_of_pages) {
      if (!(this_present_number_number_of_pages && that_present_number_number_of_pages))
        return false;
      if (this.number_number_of_pages != that.number_number_of_pages)
        return false;
    }

    boolean this_present_row_count_in_page = true && this.isSetRow_count_in_page();
    boolean that_present_row_count_in_page = true && that.isSetRow_count_in_page();
    if (this_present_row_count_in_page || that_present_row_count_in_page) {
      if (!(this_present_row_count_in_page && that_present_row_count_in_page))
        return false;
      if (!this.row_count_in_page.equals(that.row_count_in_page))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num_rows = true;
    list.add(present_num_rows);
    if (present_num_rows)
      list.add(num_rows);

    boolean present_column_data_chunks_offsets = true && (isSetColumn_data_chunks_offsets());
    list.add(present_column_data_chunks_offsets);
    if (present_column_data_chunks_offsets)
      list.add(column_data_chunks_offsets);

    boolean present_column_data_chunks_length = true && (isSetColumn_data_chunks_length());
    list.add(present_column_data_chunks_length);
    if (present_column_data_chunks_length)
      list.add(column_data_chunks_length);

    boolean present_dimension_offsets = true;
    list.add(present_dimension_offsets);
    if (present_dimension_offsets)
      list.add(dimension_offsets);

    boolean present_measure_offsets = true;
    list.add(present_measure_offsets);
    if (present_measure_offsets)
      list.add(measure_offsets);

    boolean present_number_number_of_pages = true;
    list.add(present_number_number_of_pages);
    if (present_number_number_of_pages)
      list.add(number_number_of_pages);

    boolean present_row_count_in_page = true && (isSetRow_count_in_page());
    list.add(present_row_count_in_page);
    if (present_row_count_in_page)
      list.add(row_count_in_page);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockletInfo3 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_data_chunks_offsets()).compareTo(other.isSetColumn_data_chunks_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_data_chunks_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_data_chunks_offsets, other.column_data_chunks_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_data_chunks_length()).compareTo(other.isSetColumn_data_chunks_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_data_chunks_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_data_chunks_length, other.column_data_chunks_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDimension_offsets()).compareTo(other.isSetDimension_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimension_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimension_offsets, other.dimension_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasure_offsets()).compareTo(other.isSetMeasure_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasure_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measure_offsets, other.measure_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber_number_of_pages()).compareTo(other.isSetNumber_number_of_pages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber_number_of_pages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number_number_of_pages, other.number_number_of_pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_count_in_page()).compareTo(other.isSetRow_count_in_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count_in_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count_in_page, other.row_count_in_page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockletInfo3(");
    boolean first = true;

    sb.append("num_rows:");
    sb.append(this.num_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_data_chunks_offsets:");
    if (this.column_data_chunks_offsets == null) {
      sb.append("null");
    } else {
      sb.append(this.column_data_chunks_offsets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_data_chunks_length:");
    if (this.column_data_chunks_length == null) {
      sb.append("null");
    } else {
      sb.append(this.column_data_chunks_length);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dimension_offsets:");
    sb.append(this.dimension_offsets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("measure_offsets:");
    sb.append(this.measure_offsets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number_number_of_pages:");
    sb.append(this.number_number_of_pages);
    first = false;
    if (isSetRow_count_in_page()) {
      if (!first) sb.append(", ");
      sb.append("row_count_in_page:");
      if (this.row_count_in_page == null) {
        sb.append("null");
      } else {
        sb.append(this.row_count_in_page);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'num_rows' because it's a primitive and you chose the non-beans generator.
    if (column_data_chunks_offsets == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_data_chunks_offsets' was not present! Struct: " + toString());
    }
    if (column_data_chunks_length == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_data_chunks_length' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'dimension_offsets' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'measure_offsets' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'number_number_of_pages' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockletInfo3StandardSchemeFactory implements SchemeFactory {
    public BlockletInfo3StandardScheme getScheme() {
      return new BlockletInfo3StandardScheme();
    }
  }

  private static class BlockletInfo3StandardScheme extends StandardScheme<BlockletInfo3> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockletInfo3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_rows = iprot.readI32();
              struct.setNum_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_DATA_CHUNKS_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.column_data_chunks_offsets = new ArrayList<Long>(_list120.size);
                long _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = iprot.readI64();
                  struct.column_data_chunks_offsets.add(_elem121);
                }
                iprot.readListEnd();
              }
              struct.setColumn_data_chunks_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_DATA_CHUNKS_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                struct.column_data_chunks_length = new ArrayList<Integer>(_list123.size);
                int _elem124;
                for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                {
                  _elem124 = iprot.readI32();
                  struct.column_data_chunks_length.add(_elem124);
                }
                iprot.readListEnd();
              }
              struct.setColumn_data_chunks_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIMENSION_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dimension_offsets = iprot.readI64();
              struct.setDimension_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEASURE_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.measure_offsets = iprot.readI64();
              struct.setMeasure_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBER_NUMBER_OF_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number_number_of_pages = iprot.readI32();
              struct.setNumber_number_of_pagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROW_COUNT_IN_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                struct.row_count_in_page = new ArrayList<Integer>(_list126.size);
                int _elem127;
                for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                {
                  _elem127 = iprot.readI32();
                  struct.row_count_in_page.add(_elem127);
                }
                iprot.readListEnd();
              }
              struct.setRow_count_in_pageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_rows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_rows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDimension_offsets()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dimension_offsets' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMeasure_offsets()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'measure_offsets' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumber_number_of_pages()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'number_number_of_pages' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockletInfo3 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
      oprot.writeI32(struct.num_rows);
      oprot.writeFieldEnd();
      if (struct.column_data_chunks_offsets != null) {
        oprot.writeFieldBegin(COLUMN_DATA_CHUNKS_OFFSETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.column_data_chunks_offsets.size()));
          for (long _iter129 : struct.column_data_chunks_offsets)
          {
            oprot.writeI64(_iter129);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.column_data_chunks_length != null) {
        oprot.writeFieldBegin(COLUMN_DATA_CHUNKS_LENGTH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.column_data_chunks_length.size()));
          for (int _iter130 : struct.column_data_chunks_length)
          {
            oprot.writeI32(_iter130);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIMENSION_OFFSETS_FIELD_DESC);
      oprot.writeI64(struct.dimension_offsets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEASURE_OFFSETS_FIELD_DESC);
      oprot.writeI64(struct.measure_offsets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_NUMBER_OF_PAGES_FIELD_DESC);
      oprot.writeI32(struct.number_number_of_pages);
      oprot.writeFieldEnd();
      if (struct.row_count_in_page != null) {
        if (struct.isSetRow_count_in_page()) {
          oprot.writeFieldBegin(ROW_COUNT_IN_PAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.row_count_in_page.size()));
            for (int _iter131 : struct.row_count_in_page)
            {
              oprot.writeI32(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockletInfo3TupleSchemeFactory implements SchemeFactory {
    public BlockletInfo3TupleScheme getScheme() {
      return new BlockletInfo3TupleScheme();
    }
  }

  private static class BlockletInfo3TupleScheme extends TupleScheme<BlockletInfo3> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockletInfo3 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.num_rows);
      {
        oprot.writeI32(struct.column_data_chunks_offsets.size());
        for (long _iter132 : struct.column_data_chunks_offsets)
        {
          oprot.writeI64(_iter132);
        }
      }
      {
        oprot.writeI32(struct.column_data_chunks_length.size());
        for (int _iter133 : struct.column_data_chunks_length)
        {
          oprot.writeI32(_iter133);
        }
      }
      oprot.writeI64(struct.dimension_offsets);
      oprot.writeI64(struct.measure_offsets);
      oprot.writeI32(struct.number_number_of_pages);
      BitSet optionals = new BitSet();
      if (struct.isSetRow_count_in_page()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRow_count_in_page()) {
        {
          oprot.writeI32(struct.row_count_in_page.size());
          for (int _iter134 : struct.row_count_in_page)
          {
            oprot.writeI32(_iter134);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockletInfo3 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.num_rows = iprot.readI32();
      struct.setNum_rowsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.column_data_chunks_offsets = new ArrayList<Long>(_list135.size);
        long _elem136;
        for (int _i137 = 0; _i137 < _list135.size; ++_i137)
        {
          _elem136 = iprot.readI64();
          struct.column_data_chunks_offsets.add(_elem136);
        }
      }
      struct.setColumn_data_chunks_offsetsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.column_data_chunks_length = new ArrayList<Integer>(_list138.size);
        int _elem139;
        for (int _i140 = 0; _i140 < _list138.size; ++_i140)
        {
          _elem139 = iprot.readI32();
          struct.column_data_chunks_length.add(_elem139);
        }
      }
      struct.setColumn_data_chunks_lengthIsSet(true);
      struct.dimension_offsets = iprot.readI64();
      struct.setDimension_offsetsIsSet(true);
      struct.measure_offsets = iprot.readI64();
      struct.setMeasure_offsetsIsSet(true);
      struct.number_number_of_pages = iprot.readI32();
      struct.setNumber_number_of_pagesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.row_count_in_page = new ArrayList<Integer>(_list141.size);
          int _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = iprot.readI32();
            struct.row_count_in_page.add(_elem142);
          }
        }
        struct.setRow_count_in_pageIsSet(true);
      }
    }
  }

}

