/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class DataMapSchema implements org.apache.thrift.TBase<DataMapSchema, DataMapSchema._Fields>, java.io.Serializable, Cloneable, Comparable<DataMapSchema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataMapSchema");

  private static final org.apache.thrift.protocol.TField DATA_MAP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMapName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CHILD_TABLE_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("childTableIdentifier", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CHILD_TABLE_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("childTableSchema", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataMapSchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataMapSchemaTupleSchemeFactory());
  }

  public String dataMapName; // required
  public String className; // required
  public Map<String,String> properties; // optional
  public RelationIdentifier childTableIdentifier; // optional
  public TableSchema childTableSchema; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_MAP_NAME((short)1, "dataMapName"),
    CLASS_NAME((short)2, "className"),
    PROPERTIES((short)3, "properties"),
    CHILD_TABLE_IDENTIFIER((short)4, "childTableIdentifier"),
    CHILD_TABLE_SCHEMA((short)5, "childTableSchema");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_MAP_NAME
          return DATA_MAP_NAME;
        case 2: // CLASS_NAME
          return CLASS_NAME;
        case 3: // PROPERTIES
          return PROPERTIES;
        case 4: // CHILD_TABLE_IDENTIFIER
          return CHILD_TABLE_IDENTIFIER;
        case 5: // CHILD_TABLE_SCHEMA
          return CHILD_TABLE_SCHEMA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PROPERTIES,_Fields.CHILD_TABLE_IDENTIFIER,_Fields.CHILD_TABLE_SCHEMA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_MAP_NAME, new org.apache.thrift.meta_data.FieldMetaData("dataMapName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHILD_TABLE_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("childTableIdentifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RelationIdentifier.class)));
    tmpMap.put(_Fields.CHILD_TABLE_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("childTableSchema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableSchema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataMapSchema.class, metaDataMap);
  }

  public DataMapSchema() {
  }

  public DataMapSchema(
    String dataMapName,
    String className)
  {
    this();
    this.dataMapName = dataMapName;
    this.className = className;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataMapSchema(DataMapSchema other) {
    if (other.isSetDataMapName()) {
      this.dataMapName = other.dataMapName;
    }
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetChildTableIdentifier()) {
      this.childTableIdentifier = new RelationIdentifier(other.childTableIdentifier);
    }
    if (other.isSetChildTableSchema()) {
      this.childTableSchema = new TableSchema(other.childTableSchema);
    }
  }

  public DataMapSchema deepCopy() {
    return new DataMapSchema(this);
  }

  @Override
  public void clear() {
    this.dataMapName = null;
    this.className = null;
    this.properties = null;
    this.childTableIdentifier = null;
    this.childTableSchema = null;
  }

  public String getDataMapName() {
    return this.dataMapName;
  }

  public DataMapSchema setDataMapName(String dataMapName) {
    this.dataMapName = dataMapName;
    return this;
  }

  public void unsetDataMapName() {
    this.dataMapName = null;
  }

  /** Returns true if field dataMapName is set (has been assigned a value) and false otherwise */
  public boolean isSetDataMapName() {
    return this.dataMapName != null;
  }

  public void setDataMapNameIsSet(boolean value) {
    if (!value) {
      this.dataMapName = null;
    }
  }

  public String getClassName() {
    return this.className;
  }

  public DataMapSchema setClassName(String className) {
    this.className = className;
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public DataMapSchema setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public RelationIdentifier getChildTableIdentifier() {
    return this.childTableIdentifier;
  }

  public DataMapSchema setChildTableIdentifier(RelationIdentifier childTableIdentifier) {
    this.childTableIdentifier = childTableIdentifier;
    return this;
  }

  public void unsetChildTableIdentifier() {
    this.childTableIdentifier = null;
  }

  /** Returns true if field childTableIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetChildTableIdentifier() {
    return this.childTableIdentifier != null;
  }

  public void setChildTableIdentifierIsSet(boolean value) {
    if (!value) {
      this.childTableIdentifier = null;
    }
  }

  public TableSchema getChildTableSchema() {
    return this.childTableSchema;
  }

  public DataMapSchema setChildTableSchema(TableSchema childTableSchema) {
    this.childTableSchema = childTableSchema;
    return this;
  }

  public void unsetChildTableSchema() {
    this.childTableSchema = null;
  }

  /** Returns true if field childTableSchema is set (has been assigned a value) and false otherwise */
  public boolean isSetChildTableSchema() {
    return this.childTableSchema != null;
  }

  public void setChildTableSchemaIsSet(boolean value) {
    if (!value) {
      this.childTableSchema = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_MAP_NAME:
      if (value == null) {
        unsetDataMapName();
      } else {
        setDataMapName((String)value);
      }
      break;

    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case CHILD_TABLE_IDENTIFIER:
      if (value == null) {
        unsetChildTableIdentifier();
      } else {
        setChildTableIdentifier((RelationIdentifier)value);
      }
      break;

    case CHILD_TABLE_SCHEMA:
      if (value == null) {
        unsetChildTableSchema();
      } else {
        setChildTableSchema((TableSchema)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_MAP_NAME:
      return getDataMapName();

    case CLASS_NAME:
      return getClassName();

    case PROPERTIES:
      return getProperties();

    case CHILD_TABLE_IDENTIFIER:
      return getChildTableIdentifier();

    case CHILD_TABLE_SCHEMA:
      return getChildTableSchema();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_MAP_NAME:
      return isSetDataMapName();
    case CLASS_NAME:
      return isSetClassName();
    case PROPERTIES:
      return isSetProperties();
    case CHILD_TABLE_IDENTIFIER:
      return isSetChildTableIdentifier();
    case CHILD_TABLE_SCHEMA:
      return isSetChildTableSchema();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataMapSchema)
      return this.equals((DataMapSchema)that);
    return false;
  }

  public boolean equals(DataMapSchema that) {
    if (that == null)
      return false;

    boolean this_present_dataMapName = true && this.isSetDataMapName();
    boolean that_present_dataMapName = true && that.isSetDataMapName();
    if (this_present_dataMapName || that_present_dataMapName) {
      if (!(this_present_dataMapName && that_present_dataMapName))
        return false;
      if (!this.dataMapName.equals(that.dataMapName))
        return false;
    }

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_childTableIdentifier = true && this.isSetChildTableIdentifier();
    boolean that_present_childTableIdentifier = true && that.isSetChildTableIdentifier();
    if (this_present_childTableIdentifier || that_present_childTableIdentifier) {
      if (!(this_present_childTableIdentifier && that_present_childTableIdentifier))
        return false;
      if (!this.childTableIdentifier.equals(that.childTableIdentifier))
        return false;
    }

    boolean this_present_childTableSchema = true && this.isSetChildTableSchema();
    boolean that_present_childTableSchema = true && that.isSetChildTableSchema();
    if (this_present_childTableSchema || that_present_childTableSchema) {
      if (!(this_present_childTableSchema && that_present_childTableSchema))
        return false;
      if (!this.childTableSchema.equals(that.childTableSchema))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dataMapName = true && (isSetDataMapName());
    list.add(present_dataMapName);
    if (present_dataMapName)
      list.add(dataMapName);

    boolean present_className = true && (isSetClassName());
    list.add(present_className);
    if (present_className)
      list.add(className);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_childTableIdentifier = true && (isSetChildTableIdentifier());
    list.add(present_childTableIdentifier);
    if (present_childTableIdentifier)
      list.add(childTableIdentifier);

    boolean present_childTableSchema = true && (isSetChildTableSchema());
    list.add(present_childTableSchema);
    if (present_childTableSchema)
      list.add(childTableSchema);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataMapSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDataMapName()).compareTo(other.isSetDataMapName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataMapName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMapName, other.dataMapName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildTableIdentifier()).compareTo(other.isSetChildTableIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildTableIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childTableIdentifier, other.childTableIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildTableSchema()).compareTo(other.isSetChildTableSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildTableSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childTableSchema, other.childTableSchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataMapSchema(");
    boolean first = true;

    sb.append("dataMapName:");
    if (this.dataMapName == null) {
      sb.append("null");
    } else {
      sb.append(this.dataMapName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetChildTableIdentifier()) {
      if (!first) sb.append(", ");
      sb.append("childTableIdentifier:");
      if (this.childTableIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.childTableIdentifier);
      }
      first = false;
    }
    if (isSetChildTableSchema()) {
      if (!first) sb.append(", ");
      sb.append("childTableSchema:");
      if (this.childTableSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.childTableSchema);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dataMapName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMapName' was not present! Struct: " + toString());
    }
    if (className == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'className' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (childTableIdentifier != null) {
      childTableIdentifier.validate();
    }
    if (childTableSchema != null) {
      childTableSchema.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataMapSchemaStandardSchemeFactory implements SchemeFactory {
    public DataMapSchemaStandardScheme getScheme() {
      return new DataMapSchemaStandardScheme();
    }
  }

  private static class DataMapSchemaStandardScheme extends StandardScheme<DataMapSchema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataMapSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_MAP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataMapName = iprot.readString();
              struct.setDataMapNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.className = iprot.readString();
              struct.setClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map124.size);
                String _key125;
                String _val126;
                for (int _i127 = 0; _i127 < _map124.size; ++_i127)
                {
                  _key125 = iprot.readString();
                  _val126 = iprot.readString();
                  struct.properties.put(_key125, _val126);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHILD_TABLE_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.childTableIdentifier = new RelationIdentifier();
              struct.childTableIdentifier.read(iprot);
              struct.setChildTableIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHILD_TABLE_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.childTableSchema = new TableSchema();
              struct.childTableSchema.read(iprot);
              struct.setChildTableSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataMapSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dataMapName != null) {
        oprot.writeFieldBegin(DATA_MAP_NAME_FIELD_DESC);
        oprot.writeString(struct.dataMapName);
        oprot.writeFieldEnd();
      }
      if (struct.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.className);
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter128 : struct.properties.entrySet())
            {
              oprot.writeString(_iter128.getKey());
              oprot.writeString(_iter128.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.childTableIdentifier != null) {
        if (struct.isSetChildTableIdentifier()) {
          oprot.writeFieldBegin(CHILD_TABLE_IDENTIFIER_FIELD_DESC);
          struct.childTableIdentifier.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childTableSchema != null) {
        if (struct.isSetChildTableSchema()) {
          oprot.writeFieldBegin(CHILD_TABLE_SCHEMA_FIELD_DESC);
          struct.childTableSchema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataMapSchemaTupleSchemeFactory implements SchemeFactory {
    public DataMapSchemaTupleScheme getScheme() {
      return new DataMapSchemaTupleScheme();
    }
  }

  private static class DataMapSchemaTupleScheme extends TupleScheme<DataMapSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataMapSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.dataMapName);
      oprot.writeString(struct.className);
      BitSet optionals = new BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      if (struct.isSetChildTableIdentifier()) {
        optionals.set(1);
      }
      if (struct.isSetChildTableSchema()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter129 : struct.properties.entrySet())
          {
            oprot.writeString(_iter129.getKey());
            oprot.writeString(_iter129.getValue());
          }
        }
      }
      if (struct.isSetChildTableIdentifier()) {
        struct.childTableIdentifier.write(oprot);
      }
      if (struct.isSetChildTableSchema()) {
        struct.childTableSchema.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataMapSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dataMapName = iprot.readString();
      struct.setDataMapNameIsSet(true);
      struct.className = iprot.readString();
      struct.setClassNameIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map130 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map130.size);
          String _key131;
          String _val132;
          for (int _i133 = 0; _i133 < _map130.size; ++_i133)
          {
            _key131 = iprot.readString();
            _val132 = iprot.readString();
            struct.properties.put(_key131, _val132);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.childTableIdentifier = new RelationIdentifier();
        struct.childTableIdentifier.read(iprot);
        struct.setChildTableIdentifierIsSet(true);
      }
      if (incoming.get(2)) {
        struct.childTableSchema = new TableSchema();
        struct.childTableSchema.read(iprot);
        struct.setChildTableSchemaIsSet(true);
      }
    }
  }

}

