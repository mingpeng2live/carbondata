/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Header for appendable carbon file
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class FileHeader implements org.apache.thrift.TBase<FileHeader, FileHeader._Fields>, java.io.Serializable, Cloneable, Comparable<FileHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileHeader");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("column_schema", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IS_FOOTER_PRESENT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_footer_present", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("time_stamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SPLITABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_splitable", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField SYNC_MARKER_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_marker", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMPRESSOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("compressor_name", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileHeaderTupleSchemeFactory());
  }

  public int version; // required
  public List<org.apache.carbondata.format.ColumnSchema> column_schema; // required
  public boolean is_footer_present; // optional
  public long time_stamp; // optional
  public boolean is_splitable; // optional
  public ByteBuffer sync_marker; // optional
  public String compressor_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    COLUMN_SCHEMA((short)2, "column_schema"),
    IS_FOOTER_PRESENT((short)3, "is_footer_present"),
    TIME_STAMP((short)4, "time_stamp"),
    IS_SPLITABLE((short)5, "is_splitable"),
    SYNC_MARKER((short)6, "sync_marker"),
    COMPRESSOR_NAME((short)7, "compressor_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // COLUMN_SCHEMA
          return COLUMN_SCHEMA;
        case 3: // IS_FOOTER_PRESENT
          return IS_FOOTER_PRESENT;
        case 4: // TIME_STAMP
          return TIME_STAMP;
        case 5: // IS_SPLITABLE
          return IS_SPLITABLE;
        case 6: // SYNC_MARKER
          return SYNC_MARKER;
        case 7: // COMPRESSOR_NAME
          return COMPRESSOR_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __IS_FOOTER_PRESENT_ISSET_ID = 1;
  private static final int __TIME_STAMP_ISSET_ID = 2;
  private static final int __IS_SPLITABLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_FOOTER_PRESENT,_Fields.TIME_STAMP,_Fields.IS_SPLITABLE,_Fields.SYNC_MARKER,_Fields.COMPRESSOR_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("column_schema", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.ColumnSchema.class))));
    tmpMap.put(_Fields.IS_FOOTER_PRESENT, new org.apache.thrift.meta_data.FieldMetaData("is_footer_present", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("time_stamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_SPLITABLE, new org.apache.thrift.meta_data.FieldMetaData("is_splitable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SYNC_MARKER, new org.apache.thrift.meta_data.FieldMetaData("sync_marker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COMPRESSOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("compressor_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileHeader.class, metaDataMap);
  }

  public FileHeader() {
  }

  public FileHeader(
    int version,
    List<org.apache.carbondata.format.ColumnSchema> column_schema)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.column_schema = column_schema;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileHeader(FileHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetColumn_schema()) {
      List<org.apache.carbondata.format.ColumnSchema> __this__column_schema = new ArrayList<org.apache.carbondata.format.ColumnSchema>(other.column_schema.size());
      for (org.apache.carbondata.format.ColumnSchema other_element : other.column_schema) {
        __this__column_schema.add(new org.apache.carbondata.format.ColumnSchema(other_element));
      }
      this.column_schema = __this__column_schema;
    }
    this.is_footer_present = other.is_footer_present;
    this.time_stamp = other.time_stamp;
    this.is_splitable = other.is_splitable;
    if (other.isSetSync_marker()) {
      this.sync_marker = org.apache.thrift.TBaseHelper.copyBinary(other.sync_marker);
    }
    if (other.isSetCompressor_name()) {
      this.compressor_name = other.compressor_name;
    }
  }

  public FileHeader deepCopy() {
    return new FileHeader(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.column_schema = null;
    setIs_footer_presentIsSet(false);
    this.is_footer_present = false;
    setTime_stampIsSet(false);
    this.time_stamp = 0;
    setIs_splitableIsSet(false);
    this.is_splitable = false;
    this.sync_marker = null;
    this.compressor_name = null;
  }

  public int getVersion() {
    return this.version;
  }

  public FileHeader setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getColumn_schemaSize() {
    return (this.column_schema == null) ? 0 : this.column_schema.size();
  }

  public java.util.Iterator<org.apache.carbondata.format.ColumnSchema> getColumn_schemaIterator() {
    return (this.column_schema == null) ? null : this.column_schema.iterator();
  }

  public void addToColumn_schema(org.apache.carbondata.format.ColumnSchema elem) {
    if (this.column_schema == null) {
      this.column_schema = new ArrayList<org.apache.carbondata.format.ColumnSchema>();
    }
    this.column_schema.add(elem);
  }

  public List<org.apache.carbondata.format.ColumnSchema> getColumn_schema() {
    return this.column_schema;
  }

  public FileHeader setColumn_schema(List<org.apache.carbondata.format.ColumnSchema> column_schema) {
    this.column_schema = column_schema;
    return this;
  }

  public void unsetColumn_schema() {
    this.column_schema = null;
  }

  /** Returns true if field column_schema is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_schema() {
    return this.column_schema != null;
  }

  public void setColumn_schemaIsSet(boolean value) {
    if (!value) {
      this.column_schema = null;
    }
  }

  public boolean isIs_footer_present() {
    return this.is_footer_present;
  }

  public FileHeader setIs_footer_present(boolean is_footer_present) {
    this.is_footer_present = is_footer_present;
    setIs_footer_presentIsSet(true);
    return this;
  }

  public void unsetIs_footer_present() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_FOOTER_PRESENT_ISSET_ID);
  }

  /** Returns true if field is_footer_present is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_footer_present() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_FOOTER_PRESENT_ISSET_ID);
  }

  public void setIs_footer_presentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_FOOTER_PRESENT_ISSET_ID, value);
  }

  public long getTime_stamp() {
    return this.time_stamp;
  }

  public FileHeader setTime_stamp(long time_stamp) {
    this.time_stamp = time_stamp;
    setTime_stampIsSet(true);
    return this;
  }

  public void unsetTime_stamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  /** Returns true if field time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_stamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  public void setTime_stampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_STAMP_ISSET_ID, value);
  }

  public boolean isIs_splitable() {
    return this.is_splitable;
  }

  public FileHeader setIs_splitable(boolean is_splitable) {
    this.is_splitable = is_splitable;
    setIs_splitableIsSet(true);
    return this;
  }

  public void unsetIs_splitable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SPLITABLE_ISSET_ID);
  }

  /** Returns true if field is_splitable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_splitable() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SPLITABLE_ISSET_ID);
  }

  public void setIs_splitableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SPLITABLE_ISSET_ID, value);
  }

  public byte[] getSync_marker() {
    setSync_marker(org.apache.thrift.TBaseHelper.rightSize(sync_marker));
    return sync_marker == null ? null : sync_marker.array();
  }

  public ByteBuffer bufferForSync_marker() {
    return org.apache.thrift.TBaseHelper.copyBinary(sync_marker);
  }

  public FileHeader setSync_marker(byte[] sync_marker) {
    this.sync_marker = sync_marker == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(sync_marker, sync_marker.length));
    return this;
  }

  public FileHeader setSync_marker(ByteBuffer sync_marker) {
    this.sync_marker = org.apache.thrift.TBaseHelper.copyBinary(sync_marker);
    return this;
  }

  public void unsetSync_marker() {
    this.sync_marker = null;
  }

  /** Returns true if field sync_marker is set (has been assigned a value) and false otherwise */
  public boolean isSetSync_marker() {
    return this.sync_marker != null;
  }

  public void setSync_markerIsSet(boolean value) {
    if (!value) {
      this.sync_marker = null;
    }
  }

  public String getCompressor_name() {
    return this.compressor_name;
  }

  public FileHeader setCompressor_name(String compressor_name) {
    this.compressor_name = compressor_name;
    return this;
  }

  public void unsetCompressor_name() {
    this.compressor_name = null;
  }

  /** Returns true if field compressor_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressor_name() {
    return this.compressor_name != null;
  }

  public void setCompressor_nameIsSet(boolean value) {
    if (!value) {
      this.compressor_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case COLUMN_SCHEMA:
      if (value == null) {
        unsetColumn_schema();
      } else {
        setColumn_schema((List<org.apache.carbondata.format.ColumnSchema>)value);
      }
      break;

    case IS_FOOTER_PRESENT:
      if (value == null) {
        unsetIs_footer_present();
      } else {
        setIs_footer_present((Boolean)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTime_stamp();
      } else {
        setTime_stamp((Long)value);
      }
      break;

    case IS_SPLITABLE:
      if (value == null) {
        unsetIs_splitable();
      } else {
        setIs_splitable((Boolean)value);
      }
      break;

    case SYNC_MARKER:
      if (value == null) {
        unsetSync_marker();
      } else {
        setSync_marker((ByteBuffer)value);
      }
      break;

    case COMPRESSOR_NAME:
      if (value == null) {
        unsetCompressor_name();
      } else {
        setCompressor_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case COLUMN_SCHEMA:
      return getColumn_schema();

    case IS_FOOTER_PRESENT:
      return isIs_footer_present();

    case TIME_STAMP:
      return getTime_stamp();

    case IS_SPLITABLE:
      return isIs_splitable();

    case SYNC_MARKER:
      return getSync_marker();

    case COMPRESSOR_NAME:
      return getCompressor_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case COLUMN_SCHEMA:
      return isSetColumn_schema();
    case IS_FOOTER_PRESENT:
      return isSetIs_footer_present();
    case TIME_STAMP:
      return isSetTime_stamp();
    case IS_SPLITABLE:
      return isSetIs_splitable();
    case SYNC_MARKER:
      return isSetSync_marker();
    case COMPRESSOR_NAME:
      return isSetCompressor_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileHeader)
      return this.equals((FileHeader)that);
    return false;
  }

  public boolean equals(FileHeader that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_column_schema = true && this.isSetColumn_schema();
    boolean that_present_column_schema = true && that.isSetColumn_schema();
    if (this_present_column_schema || that_present_column_schema) {
      if (!(this_present_column_schema && that_present_column_schema))
        return false;
      if (!this.column_schema.equals(that.column_schema))
        return false;
    }

    boolean this_present_is_footer_present = true && this.isSetIs_footer_present();
    boolean that_present_is_footer_present = true && that.isSetIs_footer_present();
    if (this_present_is_footer_present || that_present_is_footer_present) {
      if (!(this_present_is_footer_present && that_present_is_footer_present))
        return false;
      if (this.is_footer_present != that.is_footer_present)
        return false;
    }

    boolean this_present_time_stamp = true && this.isSetTime_stamp();
    boolean that_present_time_stamp = true && that.isSetTime_stamp();
    if (this_present_time_stamp || that_present_time_stamp) {
      if (!(this_present_time_stamp && that_present_time_stamp))
        return false;
      if (this.time_stamp != that.time_stamp)
        return false;
    }

    boolean this_present_is_splitable = true && this.isSetIs_splitable();
    boolean that_present_is_splitable = true && that.isSetIs_splitable();
    if (this_present_is_splitable || that_present_is_splitable) {
      if (!(this_present_is_splitable && that_present_is_splitable))
        return false;
      if (this.is_splitable != that.is_splitable)
        return false;
    }

    boolean this_present_sync_marker = true && this.isSetSync_marker();
    boolean that_present_sync_marker = true && that.isSetSync_marker();
    if (this_present_sync_marker || that_present_sync_marker) {
      if (!(this_present_sync_marker && that_present_sync_marker))
        return false;
      if (!this.sync_marker.equals(that.sync_marker))
        return false;
    }

    boolean this_present_compressor_name = true && this.isSetCompressor_name();
    boolean that_present_compressor_name = true && that.isSetCompressor_name();
    if (this_present_compressor_name || that_present_compressor_name) {
      if (!(this_present_compressor_name && that_present_compressor_name))
        return false;
      if (!this.compressor_name.equals(that.compressor_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_column_schema = true && (isSetColumn_schema());
    list.add(present_column_schema);
    if (present_column_schema)
      list.add(column_schema);

    boolean present_is_footer_present = true && (isSetIs_footer_present());
    list.add(present_is_footer_present);
    if (present_is_footer_present)
      list.add(is_footer_present);

    boolean present_time_stamp = true && (isSetTime_stamp());
    list.add(present_time_stamp);
    if (present_time_stamp)
      list.add(time_stamp);

    boolean present_is_splitable = true && (isSetIs_splitable());
    list.add(present_is_splitable);
    if (present_is_splitable)
      list.add(is_splitable);

    boolean present_sync_marker = true && (isSetSync_marker());
    list.add(present_sync_marker);
    if (present_sync_marker)
      list.add(sync_marker);

    boolean present_compressor_name = true && (isSetCompressor_name());
    list.add(present_compressor_name);
    if (present_compressor_name)
      list.add(compressor_name);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_schema()).compareTo(other.isSetColumn_schema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_schema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_schema, other.column_schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_footer_present()).compareTo(other.isSetIs_footer_present());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_footer_present()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_footer_present, other.is_footer_present);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_stamp()).compareTo(other.isSetTime_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_stamp, other.time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_splitable()).compareTo(other.isSetIs_splitable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_splitable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_splitable, other.is_splitable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSync_marker()).compareTo(other.isSetSync_marker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSync_marker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_marker, other.sync_marker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressor_name()).compareTo(other.isSetCompressor_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressor_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressor_name, other.compressor_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileHeader(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_schema:");
    if (this.column_schema == null) {
      sb.append("null");
    } else {
      sb.append(this.column_schema);
    }
    first = false;
    if (isSetIs_footer_present()) {
      if (!first) sb.append(", ");
      sb.append("is_footer_present:");
      sb.append(this.is_footer_present);
      first = false;
    }
    if (isSetTime_stamp()) {
      if (!first) sb.append(", ");
      sb.append("time_stamp:");
      sb.append(this.time_stamp);
      first = false;
    }
    if (isSetIs_splitable()) {
      if (!first) sb.append(", ");
      sb.append("is_splitable:");
      sb.append(this.is_splitable);
      first = false;
    }
    if (isSetSync_marker()) {
      if (!first) sb.append(", ");
      sb.append("sync_marker:");
      if (this.sync_marker == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.sync_marker, sb);
      }
      first = false;
    }
    if (isSetCompressor_name()) {
      if (!first) sb.append(", ");
      sb.append("compressor_name:");
      if (this.compressor_name == null) {
        sb.append("null");
      } else {
        sb.append(this.compressor_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    if (column_schema == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_schema' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileHeaderStandardSchemeFactory implements SchemeFactory {
    public FileHeaderStandardScheme getScheme() {
      return new FileHeaderStandardScheme();
    }
  }

  private static class FileHeaderStandardScheme extends StandardScheme<FileHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                struct.column_schema = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list202.size);
                org.apache.carbondata.format.ColumnSchema _elem203;
                for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                {
                  _elem203 = new org.apache.carbondata.format.ColumnSchema();
                  _elem203.read(iprot);
                  struct.column_schema.add(_elem203);
                }
                iprot.readListEnd();
              }
              struct.setColumn_schemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_FOOTER_PRESENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_footer_present = iprot.readBool();
              struct.setIs_footer_presentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time_stamp = iprot.readI64();
              struct.setTime_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SPLITABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_splitable = iprot.readBool();
              struct.setIs_splitableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYNC_MARKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sync_marker = iprot.readBinary();
              struct.setSync_markerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPRESSOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compressor_name = iprot.readString();
              struct.setCompressor_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.column_schema != null) {
        oprot.writeFieldBegin(COLUMN_SCHEMA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_schema.size()));
          for (org.apache.carbondata.format.ColumnSchema _iter205 : struct.column_schema)
          {
            _iter205.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_footer_present()) {
        oprot.writeFieldBegin(IS_FOOTER_PRESENT_FIELD_DESC);
        oprot.writeBool(struct.is_footer_present);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI64(struct.time_stamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_splitable()) {
        oprot.writeFieldBegin(IS_SPLITABLE_FIELD_DESC);
        oprot.writeBool(struct.is_splitable);
        oprot.writeFieldEnd();
      }
      if (struct.sync_marker != null) {
        if (struct.isSetSync_marker()) {
          oprot.writeFieldBegin(SYNC_MARKER_FIELD_DESC);
          oprot.writeBinary(struct.sync_marker);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compressor_name != null) {
        if (struct.isSetCompressor_name()) {
          oprot.writeFieldBegin(COMPRESSOR_NAME_FIELD_DESC);
          oprot.writeString(struct.compressor_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileHeaderTupleSchemeFactory implements SchemeFactory {
    public FileHeaderTupleScheme getScheme() {
      return new FileHeaderTupleScheme();
    }
  }

  private static class FileHeaderTupleScheme extends TupleScheme<FileHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version);
      {
        oprot.writeI32(struct.column_schema.size());
        for (org.apache.carbondata.format.ColumnSchema _iter206 : struct.column_schema)
        {
          _iter206.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetIs_footer_present()) {
        optionals.set(0);
      }
      if (struct.isSetTime_stamp()) {
        optionals.set(1);
      }
      if (struct.isSetIs_splitable()) {
        optionals.set(2);
      }
      if (struct.isSetSync_marker()) {
        optionals.set(3);
      }
      if (struct.isSetCompressor_name()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIs_footer_present()) {
        oprot.writeBool(struct.is_footer_present);
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeI64(struct.time_stamp);
      }
      if (struct.isSetIs_splitable()) {
        oprot.writeBool(struct.is_splitable);
      }
      if (struct.isSetSync_marker()) {
        oprot.writeBinary(struct.sync_marker);
      }
      if (struct.isSetCompressor_name()) {
        oprot.writeString(struct.compressor_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.column_schema = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list207.size);
        org.apache.carbondata.format.ColumnSchema _elem208;
        for (int _i209 = 0; _i209 < _list207.size; ++_i209)
        {
          _elem208 = new org.apache.carbondata.format.ColumnSchema();
          _elem208.read(iprot);
          struct.column_schema.add(_elem208);
        }
      }
      struct.setColumn_schemaIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.is_footer_present = iprot.readBool();
        struct.setIs_footer_presentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time_stamp = iprot.readI64();
        struct.setTime_stampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_splitable = iprot.readBool();
        struct.setIs_splitableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sync_marker = iprot.readBinary();
        struct.setSync_markerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compressor_name = iprot.readString();
        struct.setCompressor_nameIsSet(true);
      }
    }
  }

}

