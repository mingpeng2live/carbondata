/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * Encodings supported by Carbon Data.  Not all encodings are valid for all types.
 * Certain Encodings can be chained.
 */
public enum Encoding implements org.apache.thrift.TEnum {
  DICTIONARY(0),
  DELTA(1),
  RLE(2),
  INVERTED_INDEX(3),
  BIT_PACKED(4),
  DIRECT_DICTIONARY(5),
  DIRECT_COMPRESS(6),
  ADAPTIVE_INTEGRAL(7),
  ADAPTIVE_DELTA_INTEGRAL(8),
  RLE_INTEGRAL(9),
  DIRECT_STRING(10),
  ADAPTIVE_FLOATING(11),
  BOOL_BYTE(12),
  ADAPTIVE_DELTA_FLOATING(13),
  DIRECT_COMPRESS_VARCHAR(14);

  private final int value;

  private Encoding(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static Encoding findByValue(int value) { 
    switch (value) {
      case 0:
        return DICTIONARY;
      case 1:
        return DELTA;
      case 2:
        return RLE;
      case 3:
        return INVERTED_INDEX;
      case 4:
        return BIT_PACKED;
      case 5:
        return DIRECT_DICTIONARY;
      case 6:
        return DIRECT_COMPRESS;
      case 7:
        return ADAPTIVE_INTEGRAL;
      case 8:
        return ADAPTIVE_DELTA_INTEGRAL;
      case 9:
        return RLE_INTEGRAL;
      case 10:
        return DIRECT_STRING;
      case 11:
        return ADAPTIVE_FLOATING;
      case 12:
        return BOOL_BYTE;
      case 13:
        return ADAPTIVE_DELTA_FLOATING;
      case 14:
        return DIRECT_COMPRESS_VARCHAR;
      default:
        return null;
    }
  }
}
