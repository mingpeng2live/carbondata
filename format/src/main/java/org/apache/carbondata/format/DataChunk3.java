/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represents a chunk of data. The chunk can be a single column stored in Column Major format or a group of columns stored in Row Major Format.
 * For V3 format
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class DataChunk3 implements org.apache.thrift.TBase<DataChunk3, DataChunk3._Fields>, java.io.Serializable, Cloneable, Comparable<DataChunk3> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataChunk3");

  private static final org.apache.thrift.protocol.TField DATA_CHUNK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("data_chunk_list", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("page_offset", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("page_length", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LOCAL_DICTIONARY_FIELD_DESC = new org.apache.thrift.protocol.TField("local_dictionary", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataChunk3StandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataChunk3TupleSchemeFactory());
  }

  public List<DataChunk2> data_chunk_list; // required
  public List<Integer> page_offset; // optional
  public List<Integer> page_length; // optional
  public LocalDictionaryChunk local_dictionary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_CHUNK_LIST((short)1, "data_chunk_list"),
    PAGE_OFFSET((short)2, "page_offset"),
    PAGE_LENGTH((short)3, "page_length"),
    LOCAL_DICTIONARY((short)4, "local_dictionary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_CHUNK_LIST
          return DATA_CHUNK_LIST;
        case 2: // PAGE_OFFSET
          return PAGE_OFFSET;
        case 3: // PAGE_LENGTH
          return PAGE_LENGTH;
        case 4: // LOCAL_DICTIONARY
          return LOCAL_DICTIONARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PAGE_OFFSET,_Fields.PAGE_LENGTH,_Fields.LOCAL_DICTIONARY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_CHUNK_LIST, new org.apache.thrift.meta_data.FieldMetaData("data_chunk_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataChunk2.class))));
    tmpMap.put(_Fields.PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("page_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("page_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LOCAL_DICTIONARY, new org.apache.thrift.meta_data.FieldMetaData("local_dictionary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "LocalDictionaryChunk")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataChunk3.class, metaDataMap);
  }

  public DataChunk3() {
  }

  public DataChunk3(
    List<DataChunk2> data_chunk_list)
  {
    this();
    this.data_chunk_list = data_chunk_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataChunk3(DataChunk3 other) {
    if (other.isSetData_chunk_list()) {
      List<DataChunk2> __this__data_chunk_list = new ArrayList<DataChunk2>(other.data_chunk_list.size());
      for (DataChunk2 other_element : other.data_chunk_list) {
        __this__data_chunk_list.add(new DataChunk2(other_element));
      }
      this.data_chunk_list = __this__data_chunk_list;
    }
    if (other.isSetPage_offset()) {
      List<Integer> __this__page_offset = new ArrayList<Integer>(other.page_offset);
      this.page_offset = __this__page_offset;
    }
    if (other.isSetPage_length()) {
      List<Integer> __this__page_length = new ArrayList<Integer>(other.page_length);
      this.page_length = __this__page_length;
    }
    if (other.isSetLocal_dictionary()) {
      this.local_dictionary = other.local_dictionary;
    }
  }

  public DataChunk3 deepCopy() {
    return new DataChunk3(this);
  }

  @Override
  public void clear() {
    this.data_chunk_list = null;
    this.page_offset = null;
    this.page_length = null;
    this.local_dictionary = null;
  }

  public int getData_chunk_listSize() {
    return (this.data_chunk_list == null) ? 0 : this.data_chunk_list.size();
  }

  public java.util.Iterator<DataChunk2> getData_chunk_listIterator() {
    return (this.data_chunk_list == null) ? null : this.data_chunk_list.iterator();
  }

  public void addToData_chunk_list(DataChunk2 elem) {
    if (this.data_chunk_list == null) {
      this.data_chunk_list = new ArrayList<DataChunk2>();
    }
    this.data_chunk_list.add(elem);
  }

  public List<DataChunk2> getData_chunk_list() {
    return this.data_chunk_list;
  }

  public DataChunk3 setData_chunk_list(List<DataChunk2> data_chunk_list) {
    this.data_chunk_list = data_chunk_list;
    return this;
  }

  public void unsetData_chunk_list() {
    this.data_chunk_list = null;
  }

  /** Returns true if field data_chunk_list is set (has been assigned a value) and false otherwise */
  public boolean isSetData_chunk_list() {
    return this.data_chunk_list != null;
  }

  public void setData_chunk_listIsSet(boolean value) {
    if (!value) {
      this.data_chunk_list = null;
    }
  }

  public int getPage_offsetSize() {
    return (this.page_offset == null) ? 0 : this.page_offset.size();
  }

  public java.util.Iterator<Integer> getPage_offsetIterator() {
    return (this.page_offset == null) ? null : this.page_offset.iterator();
  }

  public void addToPage_offset(int elem) {
    if (this.page_offset == null) {
      this.page_offset = new ArrayList<Integer>();
    }
    this.page_offset.add(elem);
  }

  public List<Integer> getPage_offset() {
    return this.page_offset;
  }

  public DataChunk3 setPage_offset(List<Integer> page_offset) {
    this.page_offset = page_offset;
    return this;
  }

  public void unsetPage_offset() {
    this.page_offset = null;
  }

  /** Returns true if field page_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_offset() {
    return this.page_offset != null;
  }

  public void setPage_offsetIsSet(boolean value) {
    if (!value) {
      this.page_offset = null;
    }
  }

  public int getPage_lengthSize() {
    return (this.page_length == null) ? 0 : this.page_length.size();
  }

  public java.util.Iterator<Integer> getPage_lengthIterator() {
    return (this.page_length == null) ? null : this.page_length.iterator();
  }

  public void addToPage_length(int elem) {
    if (this.page_length == null) {
      this.page_length = new ArrayList<Integer>();
    }
    this.page_length.add(elem);
  }

  public List<Integer> getPage_length() {
    return this.page_length;
  }

  public DataChunk3 setPage_length(List<Integer> page_length) {
    this.page_length = page_length;
    return this;
  }

  public void unsetPage_length() {
    this.page_length = null;
  }

  /** Returns true if field page_length is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_length() {
    return this.page_length != null;
  }

  public void setPage_lengthIsSet(boolean value) {
    if (!value) {
      this.page_length = null;
    }
  }

  public LocalDictionaryChunk getLocal_dictionary() {
    return this.local_dictionary;
  }

  public DataChunk3 setLocal_dictionary(LocalDictionaryChunk local_dictionary) {
    this.local_dictionary = local_dictionary;
    return this;
  }

  public void unsetLocal_dictionary() {
    this.local_dictionary = null;
  }

  /** Returns true if field local_dictionary is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_dictionary() {
    return this.local_dictionary != null;
  }

  public void setLocal_dictionaryIsSet(boolean value) {
    if (!value) {
      this.local_dictionary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_CHUNK_LIST:
      if (value == null) {
        unsetData_chunk_list();
      } else {
        setData_chunk_list((List<DataChunk2>)value);
      }
      break;

    case PAGE_OFFSET:
      if (value == null) {
        unsetPage_offset();
      } else {
        setPage_offset((List<Integer>)value);
      }
      break;

    case PAGE_LENGTH:
      if (value == null) {
        unsetPage_length();
      } else {
        setPage_length((List<Integer>)value);
      }
      break;

    case LOCAL_DICTIONARY:
      if (value == null) {
        unsetLocal_dictionary();
      } else {
        setLocal_dictionary((LocalDictionaryChunk)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_CHUNK_LIST:
      return getData_chunk_list();

    case PAGE_OFFSET:
      return getPage_offset();

    case PAGE_LENGTH:
      return getPage_length();

    case LOCAL_DICTIONARY:
      return getLocal_dictionary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_CHUNK_LIST:
      return isSetData_chunk_list();
    case PAGE_OFFSET:
      return isSetPage_offset();
    case PAGE_LENGTH:
      return isSetPage_length();
    case LOCAL_DICTIONARY:
      return isSetLocal_dictionary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataChunk3)
      return this.equals((DataChunk3)that);
    return false;
  }

  public boolean equals(DataChunk3 that) {
    if (that == null)
      return false;

    boolean this_present_data_chunk_list = true && this.isSetData_chunk_list();
    boolean that_present_data_chunk_list = true && that.isSetData_chunk_list();
    if (this_present_data_chunk_list || that_present_data_chunk_list) {
      if (!(this_present_data_chunk_list && that_present_data_chunk_list))
        return false;
      if (!this.data_chunk_list.equals(that.data_chunk_list))
        return false;
    }

    boolean this_present_page_offset = true && this.isSetPage_offset();
    boolean that_present_page_offset = true && that.isSetPage_offset();
    if (this_present_page_offset || that_present_page_offset) {
      if (!(this_present_page_offset && that_present_page_offset))
        return false;
      if (!this.page_offset.equals(that.page_offset))
        return false;
    }

    boolean this_present_page_length = true && this.isSetPage_length();
    boolean that_present_page_length = true && that.isSetPage_length();
    if (this_present_page_length || that_present_page_length) {
      if (!(this_present_page_length && that_present_page_length))
        return false;
      if (!this.page_length.equals(that.page_length))
        return false;
    }

    boolean this_present_local_dictionary = true && this.isSetLocal_dictionary();
    boolean that_present_local_dictionary = true && that.isSetLocal_dictionary();
    if (this_present_local_dictionary || that_present_local_dictionary) {
      if (!(this_present_local_dictionary && that_present_local_dictionary))
        return false;
      if (!this.local_dictionary.equals(that.local_dictionary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_data_chunk_list = true && (isSetData_chunk_list());
    list.add(present_data_chunk_list);
    if (present_data_chunk_list)
      list.add(data_chunk_list);

    boolean present_page_offset = true && (isSetPage_offset());
    list.add(present_page_offset);
    if (present_page_offset)
      list.add(page_offset);

    boolean present_page_length = true && (isSetPage_length());
    list.add(present_page_length);
    if (present_page_length)
      list.add(page_length);

    boolean present_local_dictionary = true && (isSetLocal_dictionary());
    list.add(present_local_dictionary);
    if (present_local_dictionary)
      list.add(local_dictionary);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataChunk3 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetData_chunk_list()).compareTo(other.isSetData_chunk_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_chunk_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_chunk_list, other.data_chunk_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage_offset()).compareTo(other.isSetPage_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_offset, other.page_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage_length()).compareTo(other.isSetPage_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_length, other.page_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_dictionary()).compareTo(other.isSetLocal_dictionary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_dictionary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_dictionary, other.local_dictionary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataChunk3(");
    boolean first = true;

    sb.append("data_chunk_list:");
    if (this.data_chunk_list == null) {
      sb.append("null");
    } else {
      sb.append(this.data_chunk_list);
    }
    first = false;
    if (isSetPage_offset()) {
      if (!first) sb.append(", ");
      sb.append("page_offset:");
      if (this.page_offset == null) {
        sb.append("null");
      } else {
        sb.append(this.page_offset);
      }
      first = false;
    }
    if (isSetPage_length()) {
      if (!first) sb.append(", ");
      sb.append("page_length:");
      if (this.page_length == null) {
        sb.append("null");
      } else {
        sb.append(this.page_length);
      }
      first = false;
    }
    if (isSetLocal_dictionary()) {
      if (!first) sb.append(", ");
      sb.append("local_dictionary:");
      if (this.local_dictionary == null) {
        sb.append("null");
      } else {
        sb.append(this.local_dictionary);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (data_chunk_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_chunk_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataChunk3StandardSchemeFactory implements SchemeFactory {
    public DataChunk3StandardScheme getScheme() {
      return new DataChunk3StandardScheme();
    }
  }

  private static class DataChunk3StandardScheme extends StandardScheme<DataChunk3> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataChunk3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_CHUNK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.data_chunk_list = new ArrayList<DataChunk2>(_list72.size);
                DataChunk2 _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new DataChunk2();
                  _elem73.read(iprot);
                  struct.data_chunk_list.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setData_chunk_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.page_offset = new ArrayList<Integer>(_list75.size);
                int _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = iprot.readI32();
                  struct.page_offset.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setPage_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.page_length = new ArrayList<Integer>(_list78.size);
                int _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = iprot.readI32();
                  struct.page_length.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setPage_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCAL_DICTIONARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.local_dictionary = new LocalDictionaryChunk();
              struct.local_dictionary.read(iprot);
              struct.setLocal_dictionaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataChunk3 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data_chunk_list != null) {
        oprot.writeFieldBegin(DATA_CHUNK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data_chunk_list.size()));
          for (DataChunk2 _iter81 : struct.data_chunk_list)
          {
            _iter81.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.page_offset != null) {
        if (struct.isSetPage_offset()) {
          oprot.writeFieldBegin(PAGE_OFFSET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.page_offset.size()));
            for (int _iter82 : struct.page_offset)
            {
              oprot.writeI32(_iter82);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.page_length != null) {
        if (struct.isSetPage_length()) {
          oprot.writeFieldBegin(PAGE_LENGTH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.page_length.size()));
            for (int _iter83 : struct.page_length)
            {
              oprot.writeI32(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.local_dictionary != null) {
        if (struct.isSetLocal_dictionary()) {
          oprot.writeFieldBegin(LOCAL_DICTIONARY_FIELD_DESC);
          struct.local_dictionary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataChunk3TupleSchemeFactory implements SchemeFactory {
    public DataChunk3TupleScheme getScheme() {
      return new DataChunk3TupleScheme();
    }
  }

  private static class DataChunk3TupleScheme extends TupleScheme<DataChunk3> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataChunk3 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.data_chunk_list.size());
        for (DataChunk2 _iter84 : struct.data_chunk_list)
        {
          _iter84.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPage_offset()) {
        optionals.set(0);
      }
      if (struct.isSetPage_length()) {
        optionals.set(1);
      }
      if (struct.isSetLocal_dictionary()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPage_offset()) {
        {
          oprot.writeI32(struct.page_offset.size());
          for (int _iter85 : struct.page_offset)
          {
            oprot.writeI32(_iter85);
          }
        }
      }
      if (struct.isSetPage_length()) {
        {
          oprot.writeI32(struct.page_length.size());
          for (int _iter86 : struct.page_length)
          {
            oprot.writeI32(_iter86);
          }
        }
      }
      if (struct.isSetLocal_dictionary()) {
        struct.local_dictionary.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataChunk3 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.data_chunk_list = new ArrayList<DataChunk2>(_list87.size);
        DataChunk2 _elem88;
        for (int _i89 = 0; _i89 < _list87.size; ++_i89)
        {
          _elem88 = new DataChunk2();
          _elem88.read(iprot);
          struct.data_chunk_list.add(_elem88);
        }
      }
      struct.setData_chunk_listIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.page_offset = new ArrayList<Integer>(_list90.size);
          int _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = iprot.readI32();
            struct.page_offset.add(_elem91);
          }
        }
        struct.setPage_offsetIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.page_length = new ArrayList<Integer>(_list93.size);
          int _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readI32();
            struct.page_length.add(_elem94);
          }
        }
        struct.setPage_lengthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.local_dictionary = new LocalDictionaryChunk();
        struct.local_dictionary.read(iprot);
        struct.setLocal_dictionaryIsSet(true);
      }
    }
  }

}

