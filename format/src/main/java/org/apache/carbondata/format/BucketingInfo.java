/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Bucketing information of fields on table
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class BucketingInfo implements org.apache.thrift.TBase<BucketingInfo, BucketingInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BucketingInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BucketingInfo");

  private static final org.apache.thrift.protocol.TField TABLE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_columns", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("number_of_buckets", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BucketingInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BucketingInfoTupleSchemeFactory());
  }

  public List<ColumnSchema> table_columns; // required
  public int number_of_buckets; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_COLUMNS((short)1, "table_columns"),
    NUMBER_OF_BUCKETS((short)2, "number_of_buckets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_COLUMNS
          return TABLE_COLUMNS;
        case 2: // NUMBER_OF_BUCKETS
          return NUMBER_OF_BUCKETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_OF_BUCKETS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("table_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSchema.class))));
    tmpMap.put(_Fields.NUMBER_OF_BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("number_of_buckets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BucketingInfo.class, metaDataMap);
  }

  public BucketingInfo() {
  }

  public BucketingInfo(
    List<ColumnSchema> table_columns,
    int number_of_buckets)
  {
    this();
    this.table_columns = table_columns;
    this.number_of_buckets = number_of_buckets;
    setNumber_of_bucketsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BucketingInfo(BucketingInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_columns()) {
      List<ColumnSchema> __this__table_columns = new ArrayList<ColumnSchema>(other.table_columns.size());
      for (ColumnSchema other_element : other.table_columns) {
        __this__table_columns.add(new ColumnSchema(other_element));
      }
      this.table_columns = __this__table_columns;
    }
    this.number_of_buckets = other.number_of_buckets;
  }

  public BucketingInfo deepCopy() {
    return new BucketingInfo(this);
  }

  @Override
  public void clear() {
    this.table_columns = null;
    setNumber_of_bucketsIsSet(false);
    this.number_of_buckets = 0;
  }

  public int getTable_columnsSize() {
    return (this.table_columns == null) ? 0 : this.table_columns.size();
  }

  public java.util.Iterator<ColumnSchema> getTable_columnsIterator() {
    return (this.table_columns == null) ? null : this.table_columns.iterator();
  }

  public void addToTable_columns(ColumnSchema elem) {
    if (this.table_columns == null) {
      this.table_columns = new ArrayList<ColumnSchema>();
    }
    this.table_columns.add(elem);
  }

  public List<ColumnSchema> getTable_columns() {
    return this.table_columns;
  }

  public BucketingInfo setTable_columns(List<ColumnSchema> table_columns) {
    this.table_columns = table_columns;
    return this;
  }

  public void unsetTable_columns() {
    this.table_columns = null;
  }

  /** Returns true if field table_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_columns() {
    return this.table_columns != null;
  }

  public void setTable_columnsIsSet(boolean value) {
    if (!value) {
      this.table_columns = null;
    }
  }

  public int getNumber_of_buckets() {
    return this.number_of_buckets;
  }

  public BucketingInfo setNumber_of_buckets(int number_of_buckets) {
    this.number_of_buckets = number_of_buckets;
    setNumber_of_bucketsIsSet(true);
    return this;
  }

  public void unsetNumber_of_buckets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_OF_BUCKETS_ISSET_ID);
  }

  /** Returns true if field number_of_buckets is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber_of_buckets() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_OF_BUCKETS_ISSET_ID);
  }

  public void setNumber_of_bucketsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_OF_BUCKETS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_COLUMNS:
      if (value == null) {
        unsetTable_columns();
      } else {
        setTable_columns((List<ColumnSchema>)value);
      }
      break;

    case NUMBER_OF_BUCKETS:
      if (value == null) {
        unsetNumber_of_buckets();
      } else {
        setNumber_of_buckets((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_COLUMNS:
      return getTable_columns();

    case NUMBER_OF_BUCKETS:
      return getNumber_of_buckets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_COLUMNS:
      return isSetTable_columns();
    case NUMBER_OF_BUCKETS:
      return isSetNumber_of_buckets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BucketingInfo)
      return this.equals((BucketingInfo)that);
    return false;
  }

  public boolean equals(BucketingInfo that) {
    if (that == null)
      return false;

    boolean this_present_table_columns = true && this.isSetTable_columns();
    boolean that_present_table_columns = true && that.isSetTable_columns();
    if (this_present_table_columns || that_present_table_columns) {
      if (!(this_present_table_columns && that_present_table_columns))
        return false;
      if (!this.table_columns.equals(that.table_columns))
        return false;
    }

    boolean this_present_number_of_buckets = true;
    boolean that_present_number_of_buckets = true;
    if (this_present_number_of_buckets || that_present_number_of_buckets) {
      if (!(this_present_number_of_buckets && that_present_number_of_buckets))
        return false;
      if (this.number_of_buckets != that.number_of_buckets)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_columns = true && (isSetTable_columns());
    list.add(present_table_columns);
    if (present_table_columns)
      list.add(table_columns);

    boolean present_number_of_buckets = true;
    list.add(present_number_of_buckets);
    if (present_number_of_buckets)
      list.add(number_of_buckets);

    return list.hashCode();
  }

  @Override
  public int compareTo(BucketingInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_columns()).compareTo(other.isSetTable_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_columns, other.table_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber_of_buckets()).compareTo(other.isSetNumber_of_buckets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber_of_buckets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number_of_buckets, other.number_of_buckets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BucketingInfo(");
    boolean first = true;

    sb.append("table_columns:");
    if (this.table_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.table_columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number_of_buckets:");
    sb.append(this.number_of_buckets);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_columns' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'number_of_buckets' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BucketingInfoStandardSchemeFactory implements SchemeFactory {
    public BucketingInfoStandardScheme getScheme() {
      return new BucketingInfoStandardScheme();
    }
  }

  private static class BucketingInfoStandardScheme extends StandardScheme<BucketingInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BucketingInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.table_columns = new ArrayList<ColumnSchema>(_list90.size);
                ColumnSchema _elem91;
                for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                {
                  _elem91 = new ColumnSchema();
                  _elem91.read(iprot);
                  struct.table_columns.add(_elem91);
                }
                iprot.readListEnd();
              }
              struct.setTable_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER_OF_BUCKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number_of_buckets = iprot.readI32();
              struct.setNumber_of_bucketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumber_of_buckets()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'number_of_buckets' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BucketingInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_columns != null) {
        oprot.writeFieldBegin(TABLE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.table_columns.size()));
          for (ColumnSchema _iter93 : struct.table_columns)
          {
            _iter93.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_BUCKETS_FIELD_DESC);
      oprot.writeI32(struct.number_of_buckets);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BucketingInfoTupleSchemeFactory implements SchemeFactory {
    public BucketingInfoTupleScheme getScheme() {
      return new BucketingInfoTupleScheme();
    }
  }

  private static class BucketingInfoTupleScheme extends TupleScheme<BucketingInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BucketingInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.table_columns.size());
        for (ColumnSchema _iter94 : struct.table_columns)
        {
          _iter94.write(oprot);
        }
      }
      oprot.writeI32(struct.number_of_buckets);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BucketingInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.table_columns = new ArrayList<ColumnSchema>(_list95.size);
        ColumnSchema _elem96;
        for (int _i97 = 0; _i97 < _list95.size; ++_i97)
        {
          _elem96 = new ColumnSchema();
          _elem96.read(iprot);
          struct.table_columns.add(_elem96);
        }
      }
      struct.setTable_columnsIsSet(true);
      struct.number_of_buckets = iprot.readI32();
      struct.setNumber_of_bucketsIsSet(true);
    }
  }

}

