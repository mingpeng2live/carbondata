/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Header information stored in index file
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class IndexHeader implements org.apache.thrift.TBase<IndexHeader, IndexHeader._Fields>, java.io.Serializable, Cloneable, Comparable<IndexHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexHeader");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SEGMENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("segment_info", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BUCKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SCHEMA_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_time_stamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IS_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_sort", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IndexHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IndexHeaderTupleSchemeFactory());
  }

  public int version; // required
  public List<org.apache.carbondata.format.ColumnSchema> table_columns; // required
  public org.apache.carbondata.format.SegmentInfo segment_info; // required
  public int bucket_id; // optional
  public long schema_time_stamp; // optional
  public boolean is_sort; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    TABLE_COLUMNS((short)2, "table_columns"),
    SEGMENT_INFO((short)3, "segment_info"),
    BUCKET_ID((short)4, "bucket_id"),
    SCHEMA_TIME_STAMP((short)5, "schema_time_stamp"),
    IS_SORT((short)6, "is_sort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // TABLE_COLUMNS
          return TABLE_COLUMNS;
        case 3: // SEGMENT_INFO
          return SEGMENT_INFO;
        case 4: // BUCKET_ID
          return BUCKET_ID;
        case 5: // SCHEMA_TIME_STAMP
          return SCHEMA_TIME_STAMP;
        case 6: // IS_SORT
          return IS_SORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __BUCKET_ID_ISSET_ID = 1;
  private static final int __SCHEMA_TIME_STAMP_ISSET_ID = 2;
  private static final int __IS_SORT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BUCKET_ID,_Fields.SCHEMA_TIME_STAMP,_Fields.IS_SORT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("table_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.ColumnSchema.class))));
    tmpMap.put(_Fields.SEGMENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("segment_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.SegmentInfo.class)));
    tmpMap.put(_Fields.BUCKET_ID, new org.apache.thrift.meta_data.FieldMetaData("bucket_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEMA_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("schema_time_stamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_SORT, new org.apache.thrift.meta_data.FieldMetaData("is_sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexHeader.class, metaDataMap);
  }

  public IndexHeader() {
  }

  public IndexHeader(
    int version,
    List<org.apache.carbondata.format.ColumnSchema> table_columns,
    org.apache.carbondata.format.SegmentInfo segment_info)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.table_columns = table_columns;
    this.segment_info = segment_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexHeader(IndexHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetTable_columns()) {
      List<org.apache.carbondata.format.ColumnSchema> __this__table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(other.table_columns.size());
      for (org.apache.carbondata.format.ColumnSchema other_element : other.table_columns) {
        __this__table_columns.add(new org.apache.carbondata.format.ColumnSchema(other_element));
      }
      this.table_columns = __this__table_columns;
    }
    if (other.isSetSegment_info()) {
      this.segment_info = new org.apache.carbondata.format.SegmentInfo(other.segment_info);
    }
    this.bucket_id = other.bucket_id;
    this.schema_time_stamp = other.schema_time_stamp;
    this.is_sort = other.is_sort;
  }

  public IndexHeader deepCopy() {
    return new IndexHeader(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.table_columns = null;
    this.segment_info = null;
    setBucket_idIsSet(false);
    this.bucket_id = 0;
    setSchema_time_stampIsSet(false);
    this.schema_time_stamp = 0;
    setIs_sortIsSet(false);
    this.is_sort = false;
  }

  public int getVersion() {
    return this.version;
  }

  public IndexHeader setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getTable_columnsSize() {
    return (this.table_columns == null) ? 0 : this.table_columns.size();
  }

  public java.util.Iterator<org.apache.carbondata.format.ColumnSchema> getTable_columnsIterator() {
    return (this.table_columns == null) ? null : this.table_columns.iterator();
  }

  public void addToTable_columns(org.apache.carbondata.format.ColumnSchema elem) {
    if (this.table_columns == null) {
      this.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>();
    }
    this.table_columns.add(elem);
  }

  public List<org.apache.carbondata.format.ColumnSchema> getTable_columns() {
    return this.table_columns;
  }

  public IndexHeader setTable_columns(List<org.apache.carbondata.format.ColumnSchema> table_columns) {
    this.table_columns = table_columns;
    return this;
  }

  public void unsetTable_columns() {
    this.table_columns = null;
  }

  /** Returns true if field table_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_columns() {
    return this.table_columns != null;
  }

  public void setTable_columnsIsSet(boolean value) {
    if (!value) {
      this.table_columns = null;
    }
  }

  public org.apache.carbondata.format.SegmentInfo getSegment_info() {
    return this.segment_info;
  }

  public IndexHeader setSegment_info(org.apache.carbondata.format.SegmentInfo segment_info) {
    this.segment_info = segment_info;
    return this;
  }

  public void unsetSegment_info() {
    this.segment_info = null;
  }

  /** Returns true if field segment_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSegment_info() {
    return this.segment_info != null;
  }

  public void setSegment_infoIsSet(boolean value) {
    if (!value) {
      this.segment_info = null;
    }
  }

  public int getBucket_id() {
    return this.bucket_id;
  }

  public IndexHeader setBucket_id(int bucket_id) {
    this.bucket_id = bucket_id;
    setBucket_idIsSet(true);
    return this;
  }

  public void unsetBucket_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUCKET_ID_ISSET_ID);
  }

  /** Returns true if field bucket_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket_id() {
    return EncodingUtils.testBit(__isset_bitfield, __BUCKET_ID_ISSET_ID);
  }

  public void setBucket_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUCKET_ID_ISSET_ID, value);
  }

  public long getSchema_time_stamp() {
    return this.schema_time_stamp;
  }

  public IndexHeader setSchema_time_stamp(long schema_time_stamp) {
    this.schema_time_stamp = schema_time_stamp;
    setSchema_time_stampIsSet(true);
    return this;
  }

  public void unsetSchema_time_stamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_TIME_STAMP_ISSET_ID);
  }

  /** Returns true if field schema_time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_time_stamp() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMA_TIME_STAMP_ISSET_ID);
  }

  public void setSchema_time_stampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMA_TIME_STAMP_ISSET_ID, value);
  }

  public boolean isIs_sort() {
    return this.is_sort;
  }

  public IndexHeader setIs_sort(boolean is_sort) {
    this.is_sort = is_sort;
    setIs_sortIsSet(true);
    return this;
  }

  public void unsetIs_sort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SORT_ISSET_ID);
  }

  /** Returns true if field is_sort is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_sort() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SORT_ISSET_ID);
  }

  public void setIs_sortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case TABLE_COLUMNS:
      if (value == null) {
        unsetTable_columns();
      } else {
        setTable_columns((List<org.apache.carbondata.format.ColumnSchema>)value);
      }
      break;

    case SEGMENT_INFO:
      if (value == null) {
        unsetSegment_info();
      } else {
        setSegment_info((org.apache.carbondata.format.SegmentInfo)value);
      }
      break;

    case BUCKET_ID:
      if (value == null) {
        unsetBucket_id();
      } else {
        setBucket_id((Integer)value);
      }
      break;

    case SCHEMA_TIME_STAMP:
      if (value == null) {
        unsetSchema_time_stamp();
      } else {
        setSchema_time_stamp((Long)value);
      }
      break;

    case IS_SORT:
      if (value == null) {
        unsetIs_sort();
      } else {
        setIs_sort((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case TABLE_COLUMNS:
      return getTable_columns();

    case SEGMENT_INFO:
      return getSegment_info();

    case BUCKET_ID:
      return getBucket_id();

    case SCHEMA_TIME_STAMP:
      return getSchema_time_stamp();

    case IS_SORT:
      return isIs_sort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case TABLE_COLUMNS:
      return isSetTable_columns();
    case SEGMENT_INFO:
      return isSetSegment_info();
    case BUCKET_ID:
      return isSetBucket_id();
    case SCHEMA_TIME_STAMP:
      return isSetSchema_time_stamp();
    case IS_SORT:
      return isSetIs_sort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexHeader)
      return this.equals((IndexHeader)that);
    return false;
  }

  public boolean equals(IndexHeader that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_table_columns = true && this.isSetTable_columns();
    boolean that_present_table_columns = true && that.isSetTable_columns();
    if (this_present_table_columns || that_present_table_columns) {
      if (!(this_present_table_columns && that_present_table_columns))
        return false;
      if (!this.table_columns.equals(that.table_columns))
        return false;
    }

    boolean this_present_segment_info = true && this.isSetSegment_info();
    boolean that_present_segment_info = true && that.isSetSegment_info();
    if (this_present_segment_info || that_present_segment_info) {
      if (!(this_present_segment_info && that_present_segment_info))
        return false;
      if (!this.segment_info.equals(that.segment_info))
        return false;
    }

    boolean this_present_bucket_id = true && this.isSetBucket_id();
    boolean that_present_bucket_id = true && that.isSetBucket_id();
    if (this_present_bucket_id || that_present_bucket_id) {
      if (!(this_present_bucket_id && that_present_bucket_id))
        return false;
      if (this.bucket_id != that.bucket_id)
        return false;
    }

    boolean this_present_schema_time_stamp = true && this.isSetSchema_time_stamp();
    boolean that_present_schema_time_stamp = true && that.isSetSchema_time_stamp();
    if (this_present_schema_time_stamp || that_present_schema_time_stamp) {
      if (!(this_present_schema_time_stamp && that_present_schema_time_stamp))
        return false;
      if (this.schema_time_stamp != that.schema_time_stamp)
        return false;
    }

    boolean this_present_is_sort = true && this.isSetIs_sort();
    boolean that_present_is_sort = true && that.isSetIs_sort();
    if (this_present_is_sort || that_present_is_sort) {
      if (!(this_present_is_sort && that_present_is_sort))
        return false;
      if (this.is_sort != that.is_sort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_table_columns = true && (isSetTable_columns());
    list.add(present_table_columns);
    if (present_table_columns)
      list.add(table_columns);

    boolean present_segment_info = true && (isSetSegment_info());
    list.add(present_segment_info);
    if (present_segment_info)
      list.add(segment_info);

    boolean present_bucket_id = true && (isSetBucket_id());
    list.add(present_bucket_id);
    if (present_bucket_id)
      list.add(bucket_id);

    boolean present_schema_time_stamp = true && (isSetSchema_time_stamp());
    list.add(present_schema_time_stamp);
    if (present_schema_time_stamp)
      list.add(schema_time_stamp);

    boolean present_is_sort = true && (isSetIs_sort());
    list.add(present_is_sort);
    if (present_is_sort)
      list.add(is_sort);

    return list.hashCode();
  }

  @Override
  public int compareTo(IndexHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_columns()).compareTo(other.isSetTable_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_columns, other.table_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegment_info()).compareTo(other.isSetSegment_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegment_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segment_info, other.segment_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucket_id()).compareTo(other.isSetBucket_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket_id, other.bucket_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_time_stamp()).compareTo(other.isSetSchema_time_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_time_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_time_stamp, other.schema_time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_sort()).compareTo(other.isSetIs_sort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_sort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_sort, other.is_sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IndexHeader(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_columns:");
    if (this.table_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.table_columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("segment_info:");
    if (this.segment_info == null) {
      sb.append("null");
    } else {
      sb.append(this.segment_info);
    }
    first = false;
    if (isSetBucket_id()) {
      if (!first) sb.append(", ");
      sb.append("bucket_id:");
      sb.append(this.bucket_id);
      first = false;
    }
    if (isSetSchema_time_stamp()) {
      if (!first) sb.append(", ");
      sb.append("schema_time_stamp:");
      sb.append(this.schema_time_stamp);
      first = false;
    }
    if (isSetIs_sort()) {
      if (!first) sb.append(", ");
      sb.append("is_sort:");
      sb.append(this.is_sort);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    if (table_columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_columns' was not present! Struct: " + toString());
    }
    if (segment_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'segment_info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (segment_info != null) {
      segment_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndexHeaderStandardSchemeFactory implements SchemeFactory {
    public IndexHeaderStandardScheme getScheme() {
      return new IndexHeaderStandardScheme();
    }
  }

  private static class IndexHeaderStandardScheme extends StandardScheme<IndexHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IndexHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list0.size);
                org.apache.carbondata.format.ColumnSchema _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new org.apache.carbondata.format.ColumnSchema();
                  _elem1.read(iprot);
                  struct.table_columns.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTable_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEGMENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.segment_info = new org.apache.carbondata.format.SegmentInfo();
              struct.segment_info.read(iprot);
              struct.setSegment_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUCKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bucket_id = iprot.readI32();
              struct.setBucket_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCHEMA_TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.schema_time_stamp = iprot.readI64();
              struct.setSchema_time_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_sort = iprot.readBool();
              struct.setIs_sortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IndexHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.table_columns != null) {
        oprot.writeFieldBegin(TABLE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.table_columns.size()));
          for (org.apache.carbondata.format.ColumnSchema _iter3 : struct.table_columns)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.segment_info != null) {
        oprot.writeFieldBegin(SEGMENT_INFO_FIELD_DESC);
        struct.segment_info.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBucket_id()) {
        oprot.writeFieldBegin(BUCKET_ID_FIELD_DESC);
        oprot.writeI32(struct.bucket_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchema_time_stamp()) {
        oprot.writeFieldBegin(SCHEMA_TIME_STAMP_FIELD_DESC);
        oprot.writeI64(struct.schema_time_stamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_sort()) {
        oprot.writeFieldBegin(IS_SORT_FIELD_DESC);
        oprot.writeBool(struct.is_sort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndexHeaderTupleSchemeFactory implements SchemeFactory {
    public IndexHeaderTupleScheme getScheme() {
      return new IndexHeaderTupleScheme();
    }
  }

  private static class IndexHeaderTupleScheme extends TupleScheme<IndexHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IndexHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version);
      {
        oprot.writeI32(struct.table_columns.size());
        for (org.apache.carbondata.format.ColumnSchema _iter4 : struct.table_columns)
        {
          _iter4.write(oprot);
        }
      }
      struct.segment_info.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetBucket_id()) {
        optionals.set(0);
      }
      if (struct.isSetSchema_time_stamp()) {
        optionals.set(1);
      }
      if (struct.isSetIs_sort()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBucket_id()) {
        oprot.writeI32(struct.bucket_id);
      }
      if (struct.isSetSchema_time_stamp()) {
        oprot.writeI64(struct.schema_time_stamp);
      }
      if (struct.isSetIs_sort()) {
        oprot.writeBool(struct.is_sort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IndexHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list5.size);
        org.apache.carbondata.format.ColumnSchema _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new org.apache.carbondata.format.ColumnSchema();
          _elem6.read(iprot);
          struct.table_columns.add(_elem6);
        }
      }
      struct.setTable_columnsIsSet(true);
      struct.segment_info = new org.apache.carbondata.format.SegmentInfo();
      struct.segment_info.read(iprot);
      struct.setSegment_infoIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.bucket_id = iprot.readI32();
        struct.setBucket_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.schema_time_stamp = iprot.readI64();
        struct.setSchema_time_stampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_sort = iprot.readBool();
        struct.setIs_sortIsSet(true);
      }
    }
  }

}

