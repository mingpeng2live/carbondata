/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class LocalDictionaryChunk implements org.apache.thrift.TBase<LocalDictionaryChunk, LocalDictionaryChunk._Fields>, java.io.Serializable, Cloneable, Comparable<LocalDictionaryChunk> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LocalDictionaryChunk");

  private static final org.apache.thrift.protocol.TField DICTIONARY_META_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_meta", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DICTIONARY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_data", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DICTIONARY_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_values", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocalDictionaryChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocalDictionaryChunkTupleSchemeFactory());
  }

  public LocalDictionaryChunkMeta dictionary_meta; // required
  public ByteBuffer dictionary_data; // required
  public ByteBuffer dictionary_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DICTIONARY_META((short)1, "dictionary_meta"),
    DICTIONARY_DATA((short)2, "dictionary_data"),
    DICTIONARY_VALUES((short)3, "dictionary_values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DICTIONARY_META
          return DICTIONARY_META;
        case 2: // DICTIONARY_DATA
          return DICTIONARY_DATA;
        case 3: // DICTIONARY_VALUES
          return DICTIONARY_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DICTIONARY_META, new org.apache.thrift.meta_data.FieldMetaData("dictionary_meta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "LocalDictionaryChunkMeta")));
    tmpMap.put(_Fields.DICTIONARY_DATA, new org.apache.thrift.meta_data.FieldMetaData("dictionary_data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DICTIONARY_VALUES, new org.apache.thrift.meta_data.FieldMetaData("dictionary_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LocalDictionaryChunk.class, metaDataMap);
  }

  public LocalDictionaryChunk() {
  }

  public LocalDictionaryChunk(
    LocalDictionaryChunkMeta dictionary_meta,
    ByteBuffer dictionary_data,
    ByteBuffer dictionary_values)
  {
    this();
    this.dictionary_meta = dictionary_meta;
    this.dictionary_data = org.apache.thrift.TBaseHelper.copyBinary(dictionary_data);
    this.dictionary_values = org.apache.thrift.TBaseHelper.copyBinary(dictionary_values);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LocalDictionaryChunk(LocalDictionaryChunk other) {
    if (other.isSetDictionary_meta()) {
      this.dictionary_meta = other.dictionary_meta;
    }
    if (other.isSetDictionary_data()) {
      this.dictionary_data = org.apache.thrift.TBaseHelper.copyBinary(other.dictionary_data);
    }
    if (other.isSetDictionary_values()) {
      this.dictionary_values = org.apache.thrift.TBaseHelper.copyBinary(other.dictionary_values);
    }
  }

  public LocalDictionaryChunk deepCopy() {
    return new LocalDictionaryChunk(this);
  }

  @Override
  public void clear() {
    this.dictionary_meta = null;
    this.dictionary_data = null;
    this.dictionary_values = null;
  }

  public LocalDictionaryChunkMeta getDictionary_meta() {
    return this.dictionary_meta;
  }

  public LocalDictionaryChunk setDictionary_meta(LocalDictionaryChunkMeta dictionary_meta) {
    this.dictionary_meta = dictionary_meta;
    return this;
  }

  public void unsetDictionary_meta() {
    this.dictionary_meta = null;
  }

  /** Returns true if field dictionary_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_meta() {
    return this.dictionary_meta != null;
  }

  public void setDictionary_metaIsSet(boolean value) {
    if (!value) {
      this.dictionary_meta = null;
    }
  }

  public byte[] getDictionary_data() {
    setDictionary_data(org.apache.thrift.TBaseHelper.rightSize(dictionary_data));
    return dictionary_data == null ? null : dictionary_data.array();
  }

  public ByteBuffer bufferForDictionary_data() {
    return org.apache.thrift.TBaseHelper.copyBinary(dictionary_data);
  }

  public LocalDictionaryChunk setDictionary_data(byte[] dictionary_data) {
    this.dictionary_data = dictionary_data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(dictionary_data, dictionary_data.length));
    return this;
  }

  public LocalDictionaryChunk setDictionary_data(ByteBuffer dictionary_data) {
    this.dictionary_data = org.apache.thrift.TBaseHelper.copyBinary(dictionary_data);
    return this;
  }

  public void unsetDictionary_data() {
    this.dictionary_data = null;
  }

  /** Returns true if field dictionary_data is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_data() {
    return this.dictionary_data != null;
  }

  public void setDictionary_dataIsSet(boolean value) {
    if (!value) {
      this.dictionary_data = null;
    }
  }

  public byte[] getDictionary_values() {
    setDictionary_values(org.apache.thrift.TBaseHelper.rightSize(dictionary_values));
    return dictionary_values == null ? null : dictionary_values.array();
  }

  public ByteBuffer bufferForDictionary_values() {
    return org.apache.thrift.TBaseHelper.copyBinary(dictionary_values);
  }

  public LocalDictionaryChunk setDictionary_values(byte[] dictionary_values) {
    this.dictionary_values = dictionary_values == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(dictionary_values, dictionary_values.length));
    return this;
  }

  public LocalDictionaryChunk setDictionary_values(ByteBuffer dictionary_values) {
    this.dictionary_values = org.apache.thrift.TBaseHelper.copyBinary(dictionary_values);
    return this;
  }

  public void unsetDictionary_values() {
    this.dictionary_values = null;
  }

  /** Returns true if field dictionary_values is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_values() {
    return this.dictionary_values != null;
  }

  public void setDictionary_valuesIsSet(boolean value) {
    if (!value) {
      this.dictionary_values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DICTIONARY_META:
      if (value == null) {
        unsetDictionary_meta();
      } else {
        setDictionary_meta((LocalDictionaryChunkMeta)value);
      }
      break;

    case DICTIONARY_DATA:
      if (value == null) {
        unsetDictionary_data();
      } else {
        setDictionary_data((ByteBuffer)value);
      }
      break;

    case DICTIONARY_VALUES:
      if (value == null) {
        unsetDictionary_values();
      } else {
        setDictionary_values((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DICTIONARY_META:
      return getDictionary_meta();

    case DICTIONARY_DATA:
      return getDictionary_data();

    case DICTIONARY_VALUES:
      return getDictionary_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DICTIONARY_META:
      return isSetDictionary_meta();
    case DICTIONARY_DATA:
      return isSetDictionary_data();
    case DICTIONARY_VALUES:
      return isSetDictionary_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LocalDictionaryChunk)
      return this.equals((LocalDictionaryChunk)that);
    return false;
  }

  public boolean equals(LocalDictionaryChunk that) {
    if (that == null)
      return false;

    boolean this_present_dictionary_meta = true && this.isSetDictionary_meta();
    boolean that_present_dictionary_meta = true && that.isSetDictionary_meta();
    if (this_present_dictionary_meta || that_present_dictionary_meta) {
      if (!(this_present_dictionary_meta && that_present_dictionary_meta))
        return false;
      if (!this.dictionary_meta.equals(that.dictionary_meta))
        return false;
    }

    boolean this_present_dictionary_data = true && this.isSetDictionary_data();
    boolean that_present_dictionary_data = true && that.isSetDictionary_data();
    if (this_present_dictionary_data || that_present_dictionary_data) {
      if (!(this_present_dictionary_data && that_present_dictionary_data))
        return false;
      if (!this.dictionary_data.equals(that.dictionary_data))
        return false;
    }

    boolean this_present_dictionary_values = true && this.isSetDictionary_values();
    boolean that_present_dictionary_values = true && that.isSetDictionary_values();
    if (this_present_dictionary_values || that_present_dictionary_values) {
      if (!(this_present_dictionary_values && that_present_dictionary_values))
        return false;
      if (!this.dictionary_values.equals(that.dictionary_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dictionary_meta = true && (isSetDictionary_meta());
    list.add(present_dictionary_meta);
    if (present_dictionary_meta)
      list.add(dictionary_meta);

    boolean present_dictionary_data = true && (isSetDictionary_data());
    list.add(present_dictionary_data);
    if (present_dictionary_data)
      list.add(dictionary_data);

    boolean present_dictionary_values = true && (isSetDictionary_values());
    list.add(present_dictionary_values);
    if (present_dictionary_values)
      list.add(dictionary_values);

    return list.hashCode();
  }

  @Override
  public int compareTo(LocalDictionaryChunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDictionary_meta()).compareTo(other.isSetDictionary_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_meta, other.dictionary_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictionary_data()).compareTo(other.isSetDictionary_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_data, other.dictionary_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictionary_values()).compareTo(other.isSetDictionary_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_values, other.dictionary_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LocalDictionaryChunk(");
    boolean first = true;

    sb.append("dictionary_meta:");
    if (this.dictionary_meta == null) {
      sb.append("null");
    } else {
      sb.append(this.dictionary_meta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dictionary_data:");
    if (this.dictionary_data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.dictionary_data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dictionary_values:");
    if (this.dictionary_values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.dictionary_values, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dictionary_meta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dictionary_meta' was not present! Struct: " + toString());
    }
    if (dictionary_data == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dictionary_data' was not present! Struct: " + toString());
    }
    if (dictionary_values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dictionary_values' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocalDictionaryChunkStandardSchemeFactory implements SchemeFactory {
    public LocalDictionaryChunkStandardScheme getScheme() {
      return new LocalDictionaryChunkStandardScheme();
    }
  }

  private static class LocalDictionaryChunkStandardScheme extends StandardScheme<LocalDictionaryChunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LocalDictionaryChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DICTIONARY_META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dictionary_meta = new LocalDictionaryChunkMeta();
              struct.dictionary_meta.read(iprot);
              struct.setDictionary_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DICTIONARY_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dictionary_data = iprot.readBinary();
              struct.setDictionary_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DICTIONARY_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dictionary_values = iprot.readBinary();
              struct.setDictionary_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LocalDictionaryChunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dictionary_meta != null) {
        oprot.writeFieldBegin(DICTIONARY_META_FIELD_DESC);
        struct.dictionary_meta.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dictionary_data != null) {
        oprot.writeFieldBegin(DICTIONARY_DATA_FIELD_DESC);
        oprot.writeBinary(struct.dictionary_data);
        oprot.writeFieldEnd();
      }
      if (struct.dictionary_values != null) {
        oprot.writeFieldBegin(DICTIONARY_VALUES_FIELD_DESC);
        oprot.writeBinary(struct.dictionary_values);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocalDictionaryChunkTupleSchemeFactory implements SchemeFactory {
    public LocalDictionaryChunkTupleScheme getScheme() {
      return new LocalDictionaryChunkTupleScheme();
    }
  }

  private static class LocalDictionaryChunkTupleScheme extends TupleScheme<LocalDictionaryChunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LocalDictionaryChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.dictionary_meta.write(oprot);
      oprot.writeBinary(struct.dictionary_data);
      oprot.writeBinary(struct.dictionary_values);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LocalDictionaryChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dictionary_meta = new LocalDictionaryChunkMeta();
      struct.dictionary_meta.read(iprot);
      struct.setDictionary_metaIsSet(true);
      struct.dictionary_data = iprot.readBinary();
      struct.setDictionary_dataIsSet(true);
      struct.dictionary_values = iprot.readBinary();
      struct.setDictionary_valuesIsSet(true);
    }
  }

}

