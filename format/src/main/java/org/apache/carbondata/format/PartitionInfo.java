/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Partition information of table
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-12-05")
public class PartitionInfo implements org.apache.thrift.TBase<PartitionInfo, PartitionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PartitionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartitionInfo");

  private static final org.apache.thrift.protocol.TField PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_columns", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("list_info", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField RANGE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("range_info", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_ids", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_partitions", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_partition", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartitionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartitionInfoTupleSchemeFactory());
  }

  public List<ColumnSchema> partition_columns; // required
  /**
   * 
   * @see PartitionType
   */
  public PartitionType partition_type; // required
  public List<List<String>> list_info; // optional
  public List<String> range_info; // optional
  public List<Integer> partition_ids; // optional
  public int num_partitions; // optional
  public int max_partition; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_COLUMNS((short)1, "partition_columns"),
    /**
     * 
     * @see PartitionType
     */
    PARTITION_TYPE((short)2, "partition_type"),
    LIST_INFO((short)3, "list_info"),
    RANGE_INFO((short)4, "range_info"),
    PARTITION_IDS((short)5, "partition_ids"),
    NUM_PARTITIONS((short)6, "num_partitions"),
    MAX_PARTITION((short)7, "max_partition");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_COLUMNS
          return PARTITION_COLUMNS;
        case 2: // PARTITION_TYPE
          return PARTITION_TYPE;
        case 3: // LIST_INFO
          return LIST_INFO;
        case 4: // RANGE_INFO
          return RANGE_INFO;
        case 5: // PARTITION_IDS
          return PARTITION_IDS;
        case 6: // NUM_PARTITIONS
          return NUM_PARTITIONS;
        case 7: // MAX_PARTITION
          return MAX_PARTITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_PARTITIONS_ISSET_ID = 0;
  private static final int __MAX_PARTITION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LIST_INFO,_Fields.RANGE_INFO,_Fields.PARTITION_IDS,_Fields.NUM_PARTITIONS,_Fields.MAX_PARTITION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("partition_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSchema.class))));
    tmpMap.put(_Fields.PARTITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partition_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PartitionType.class)));
    tmpMap.put(_Fields.LIST_INFO, new org.apache.thrift.meta_data.FieldMetaData("list_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.RANGE_INFO, new org.apache.thrift.meta_data.FieldMetaData("range_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("partition_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("num_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("max_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartitionInfo.class, metaDataMap);
  }

  public PartitionInfo() {
  }

  public PartitionInfo(
    List<ColumnSchema> partition_columns,
    PartitionType partition_type)
  {
    this();
    this.partition_columns = partition_columns;
    this.partition_type = partition_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartitionInfo(PartitionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_columns()) {
      List<ColumnSchema> __this__partition_columns = new ArrayList<ColumnSchema>(other.partition_columns.size());
      for (ColumnSchema other_element : other.partition_columns) {
        __this__partition_columns.add(new ColumnSchema(other_element));
      }
      this.partition_columns = __this__partition_columns;
    }
    if (other.isSetPartition_type()) {
      this.partition_type = other.partition_type;
    }
    if (other.isSetList_info()) {
      List<List<String>> __this__list_info = new ArrayList<List<String>>(other.list_info.size());
      for (List<String> other_element : other.list_info) {
        List<String> __this__list_info_copy = new ArrayList<String>(other_element);
        __this__list_info.add(__this__list_info_copy);
      }
      this.list_info = __this__list_info;
    }
    if (other.isSetRange_info()) {
      List<String> __this__range_info = new ArrayList<String>(other.range_info);
      this.range_info = __this__range_info;
    }
    if (other.isSetPartition_ids()) {
      List<Integer> __this__partition_ids = new ArrayList<Integer>(other.partition_ids);
      this.partition_ids = __this__partition_ids;
    }
    this.num_partitions = other.num_partitions;
    this.max_partition = other.max_partition;
  }

  public PartitionInfo deepCopy() {
    return new PartitionInfo(this);
  }

  @Override
  public void clear() {
    this.partition_columns = null;
    this.partition_type = null;
    this.list_info = null;
    this.range_info = null;
    this.partition_ids = null;
    setNum_partitionsIsSet(false);
    this.num_partitions = 0;
    setMax_partitionIsSet(false);
    this.max_partition = 0;
  }

  public int getPartition_columnsSize() {
    return (this.partition_columns == null) ? 0 : this.partition_columns.size();
  }

  public java.util.Iterator<ColumnSchema> getPartition_columnsIterator() {
    return (this.partition_columns == null) ? null : this.partition_columns.iterator();
  }

  public void addToPartition_columns(ColumnSchema elem) {
    if (this.partition_columns == null) {
      this.partition_columns = new ArrayList<ColumnSchema>();
    }
    this.partition_columns.add(elem);
  }

  public List<ColumnSchema> getPartition_columns() {
    return this.partition_columns;
  }

  public PartitionInfo setPartition_columns(List<ColumnSchema> partition_columns) {
    this.partition_columns = partition_columns;
    return this;
  }

  public void unsetPartition_columns() {
    this.partition_columns = null;
  }

  /** Returns true if field partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_columns() {
    return this.partition_columns != null;
  }

  public void setPartition_columnsIsSet(boolean value) {
    if (!value) {
      this.partition_columns = null;
    }
  }

  /**
   * 
   * @see PartitionType
   */
  public PartitionType getPartition_type() {
    return this.partition_type;
  }

  /**
   * 
   * @see PartitionType
   */
  public PartitionInfo setPartition_type(PartitionType partition_type) {
    this.partition_type = partition_type;
    return this;
  }

  public void unsetPartition_type() {
    this.partition_type = null;
  }

  /** Returns true if field partition_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_type() {
    return this.partition_type != null;
  }

  public void setPartition_typeIsSet(boolean value) {
    if (!value) {
      this.partition_type = null;
    }
  }

  public int getList_infoSize() {
    return (this.list_info == null) ? 0 : this.list_info.size();
  }

  public java.util.Iterator<List<String>> getList_infoIterator() {
    return (this.list_info == null) ? null : this.list_info.iterator();
  }

  public void addToList_info(List<String> elem) {
    if (this.list_info == null) {
      this.list_info = new ArrayList<List<String>>();
    }
    this.list_info.add(elem);
  }

  public List<List<String>> getList_info() {
    return this.list_info;
  }

  public PartitionInfo setList_info(List<List<String>> list_info) {
    this.list_info = list_info;
    return this;
  }

  public void unsetList_info() {
    this.list_info = null;
  }

  /** Returns true if field list_info is set (has been assigned a value) and false otherwise */
  public boolean isSetList_info() {
    return this.list_info != null;
  }

  public void setList_infoIsSet(boolean value) {
    if (!value) {
      this.list_info = null;
    }
  }

  public int getRange_infoSize() {
    return (this.range_info == null) ? 0 : this.range_info.size();
  }

  public java.util.Iterator<String> getRange_infoIterator() {
    return (this.range_info == null) ? null : this.range_info.iterator();
  }

  public void addToRange_info(String elem) {
    if (this.range_info == null) {
      this.range_info = new ArrayList<String>();
    }
    this.range_info.add(elem);
  }

  public List<String> getRange_info() {
    return this.range_info;
  }

  public PartitionInfo setRange_info(List<String> range_info) {
    this.range_info = range_info;
    return this;
  }

  public void unsetRange_info() {
    this.range_info = null;
  }

  /** Returns true if field range_info is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_info() {
    return this.range_info != null;
  }

  public void setRange_infoIsSet(boolean value) {
    if (!value) {
      this.range_info = null;
    }
  }

  public int getPartition_idsSize() {
    return (this.partition_ids == null) ? 0 : this.partition_ids.size();
  }

  public java.util.Iterator<Integer> getPartition_idsIterator() {
    return (this.partition_ids == null) ? null : this.partition_ids.iterator();
  }

  public void addToPartition_ids(int elem) {
    if (this.partition_ids == null) {
      this.partition_ids = new ArrayList<Integer>();
    }
    this.partition_ids.add(elem);
  }

  public List<Integer> getPartition_ids() {
    return this.partition_ids;
  }

  public PartitionInfo setPartition_ids(List<Integer> partition_ids) {
    this.partition_ids = partition_ids;
    return this;
  }

  public void unsetPartition_ids() {
    this.partition_ids = null;
  }

  /** Returns true if field partition_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_ids() {
    return this.partition_ids != null;
  }

  public void setPartition_idsIsSet(boolean value) {
    if (!value) {
      this.partition_ids = null;
    }
  }

  public int getNum_partitions() {
    return this.num_partitions;
  }

  public PartitionInfo setNum_partitions(int num_partitions) {
    this.num_partitions = num_partitions;
    setNum_partitionsIsSet(true);
    return this;
  }

  public void unsetNum_partitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_PARTITIONS_ISSET_ID);
  }

  /** Returns true if field num_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_partitions() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_PARTITIONS_ISSET_ID);
  }

  public void setNum_partitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_PARTITIONS_ISSET_ID, value);
  }

  public int getMax_partition() {
    return this.max_partition;
  }

  public PartitionInfo setMax_partition(int max_partition) {
    this.max_partition = max_partition;
    setMax_partitionIsSet(true);
    return this;
  }

  public void unsetMax_partition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_PARTITION_ISSET_ID);
  }

  /** Returns true if field max_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_partition() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_PARTITION_ISSET_ID);
  }

  public void setMax_partitionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_PARTITION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_COLUMNS:
      if (value == null) {
        unsetPartition_columns();
      } else {
        setPartition_columns((List<ColumnSchema>)value);
      }
      break;

    case PARTITION_TYPE:
      if (value == null) {
        unsetPartition_type();
      } else {
        setPartition_type((PartitionType)value);
      }
      break;

    case LIST_INFO:
      if (value == null) {
        unsetList_info();
      } else {
        setList_info((List<List<String>>)value);
      }
      break;

    case RANGE_INFO:
      if (value == null) {
        unsetRange_info();
      } else {
        setRange_info((List<String>)value);
      }
      break;

    case PARTITION_IDS:
      if (value == null) {
        unsetPartition_ids();
      } else {
        setPartition_ids((List<Integer>)value);
      }
      break;

    case NUM_PARTITIONS:
      if (value == null) {
        unsetNum_partitions();
      } else {
        setNum_partitions((Integer)value);
      }
      break;

    case MAX_PARTITION:
      if (value == null) {
        unsetMax_partition();
      } else {
        setMax_partition((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_COLUMNS:
      return getPartition_columns();

    case PARTITION_TYPE:
      return getPartition_type();

    case LIST_INFO:
      return getList_info();

    case RANGE_INFO:
      return getRange_info();

    case PARTITION_IDS:
      return getPartition_ids();

    case NUM_PARTITIONS:
      return getNum_partitions();

    case MAX_PARTITION:
      return getMax_partition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_COLUMNS:
      return isSetPartition_columns();
    case PARTITION_TYPE:
      return isSetPartition_type();
    case LIST_INFO:
      return isSetList_info();
    case RANGE_INFO:
      return isSetRange_info();
    case PARTITION_IDS:
      return isSetPartition_ids();
    case NUM_PARTITIONS:
      return isSetNum_partitions();
    case MAX_PARTITION:
      return isSetMax_partition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartitionInfo)
      return this.equals((PartitionInfo)that);
    return false;
  }

  public boolean equals(PartitionInfo that) {
    if (that == null)
      return false;

    boolean this_present_partition_columns = true && this.isSetPartition_columns();
    boolean that_present_partition_columns = true && that.isSetPartition_columns();
    if (this_present_partition_columns || that_present_partition_columns) {
      if (!(this_present_partition_columns && that_present_partition_columns))
        return false;
      if (!this.partition_columns.equals(that.partition_columns))
        return false;
    }

    boolean this_present_partition_type = true && this.isSetPartition_type();
    boolean that_present_partition_type = true && that.isSetPartition_type();
    if (this_present_partition_type || that_present_partition_type) {
      if (!(this_present_partition_type && that_present_partition_type))
        return false;
      if (!this.partition_type.equals(that.partition_type))
        return false;
    }

    boolean this_present_list_info = true && this.isSetList_info();
    boolean that_present_list_info = true && that.isSetList_info();
    if (this_present_list_info || that_present_list_info) {
      if (!(this_present_list_info && that_present_list_info))
        return false;
      if (!this.list_info.equals(that.list_info))
        return false;
    }

    boolean this_present_range_info = true && this.isSetRange_info();
    boolean that_present_range_info = true && that.isSetRange_info();
    if (this_present_range_info || that_present_range_info) {
      if (!(this_present_range_info && that_present_range_info))
        return false;
      if (!this.range_info.equals(that.range_info))
        return false;
    }

    boolean this_present_partition_ids = true && this.isSetPartition_ids();
    boolean that_present_partition_ids = true && that.isSetPartition_ids();
    if (this_present_partition_ids || that_present_partition_ids) {
      if (!(this_present_partition_ids && that_present_partition_ids))
        return false;
      if (!this.partition_ids.equals(that.partition_ids))
        return false;
    }

    boolean this_present_num_partitions = true && this.isSetNum_partitions();
    boolean that_present_num_partitions = true && that.isSetNum_partitions();
    if (this_present_num_partitions || that_present_num_partitions) {
      if (!(this_present_num_partitions && that_present_num_partitions))
        return false;
      if (this.num_partitions != that.num_partitions)
        return false;
    }

    boolean this_present_max_partition = true && this.isSetMax_partition();
    boolean that_present_max_partition = true && that.isSetMax_partition();
    if (this_present_max_partition || that_present_max_partition) {
      if (!(this_present_max_partition && that_present_max_partition))
        return false;
      if (this.max_partition != that.max_partition)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partition_columns = true && (isSetPartition_columns());
    list.add(present_partition_columns);
    if (present_partition_columns)
      list.add(partition_columns);

    boolean present_partition_type = true && (isSetPartition_type());
    list.add(present_partition_type);
    if (present_partition_type)
      list.add(partition_type.getValue());

    boolean present_list_info = true && (isSetList_info());
    list.add(present_list_info);
    if (present_list_info)
      list.add(list_info);

    boolean present_range_info = true && (isSetRange_info());
    list.add(present_range_info);
    if (present_range_info)
      list.add(range_info);

    boolean present_partition_ids = true && (isSetPartition_ids());
    list.add(present_partition_ids);
    if (present_partition_ids)
      list.add(partition_ids);

    boolean present_num_partitions = true && (isSetNum_partitions());
    list.add(present_num_partitions);
    if (present_num_partitions)
      list.add(num_partitions);

    boolean present_max_partition = true && (isSetMax_partition());
    list.add(present_max_partition);
    if (present_max_partition)
      list.add(max_partition);

    return list.hashCode();
  }

  @Override
  public int compareTo(PartitionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartition_columns()).compareTo(other.isSetPartition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_columns, other.partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_type()).compareTo(other.isSetPartition_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_type, other.partition_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetList_info()).compareTo(other.isSetList_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_info, other.list_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange_info()).compareTo(other.isSetRange_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_info, other.range_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_ids()).compareTo(other.isSetPartition_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_ids, other.partition_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_partitions()).compareTo(other.isSetNum_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_partitions, other.num_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_partition()).compareTo(other.isSetMax_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_partition, other.max_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartitionInfo(");
    boolean first = true;

    sb.append("partition_columns:");
    if (this.partition_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_type:");
    if (this.partition_type == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_type);
    }
    first = false;
    if (isSetList_info()) {
      if (!first) sb.append(", ");
      sb.append("list_info:");
      if (this.list_info == null) {
        sb.append("null");
      } else {
        sb.append(this.list_info);
      }
      first = false;
    }
    if (isSetRange_info()) {
      if (!first) sb.append(", ");
      sb.append("range_info:");
      if (this.range_info == null) {
        sb.append("null");
      } else {
        sb.append(this.range_info);
      }
      first = false;
    }
    if (isSetPartition_ids()) {
      if (!first) sb.append(", ");
      sb.append("partition_ids:");
      if (this.partition_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_ids);
      }
      first = false;
    }
    if (isSetNum_partitions()) {
      if (!first) sb.append(", ");
      sb.append("num_partitions:");
      sb.append(this.num_partitions);
      first = false;
    }
    if (isSetMax_partition()) {
      if (!first) sb.append(", ");
      sb.append("max_partition:");
      sb.append(this.max_partition);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition_columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_columns' was not present! Struct: " + toString());
    }
    if (partition_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartitionInfoStandardSchemeFactory implements SchemeFactory {
    public PartitionInfoStandardScheme getScheme() {
      return new PartitionInfoStandardScheme();
    }
  }

  private static class PartitionInfoStandardScheme extends StandardScheme<PartitionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartitionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                struct.partition_columns = new ArrayList<ColumnSchema>(_list50.size);
                ColumnSchema _elem51;
                for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                {
                  _elem51 = new ColumnSchema();
                  _elem51.read(iprot);
                  struct.partition_columns.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setPartition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_type = org.apache.carbondata.format.PartitionType.findByValue(iprot.readI32());
              struct.setPartition_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIST_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list53 = iprot.readListBegin();
                struct.list_info = new ArrayList<List<String>>(_list53.size);
                List<String> _elem54;
                for (int _i55 = 0; _i55 < _list53.size; ++_i55)
                {
                  {
                    org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                    _elem54 = new ArrayList<String>(_list56.size);
                    String _elem57;
                    for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                    {
                      _elem57 = iprot.readString();
                      _elem54.add(_elem57);
                    }
                    iprot.readListEnd();
                  }
                  struct.list_info.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setList_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANGE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.range_info = new ArrayList<String>(_list59.size);
                String _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = iprot.readString();
                  struct.range_info.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setRange_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.partition_ids = new ArrayList<Integer>(_list62.size);
                int _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = iprot.readI32();
                  struct.partition_ids.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setPartition_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_partitions = iprot.readI32();
              struct.setNum_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_partition = iprot.readI32();
              struct.setMax_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartitionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_columns != null) {
        oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_columns.size()));
          for (ColumnSchema _iter65 : struct.partition_columns)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partition_type != null) {
        oprot.writeFieldBegin(PARTITION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.partition_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.list_info != null) {
        if (struct.isSetList_info()) {
          oprot.writeFieldBegin(LIST_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.list_info.size()));
            for (List<String> _iter66 : struct.list_info)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter66.size()));
                for (String _iter67 : _iter66)
                {
                  oprot.writeString(_iter67);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.range_info != null) {
        if (struct.isSetRange_info()) {
          oprot.writeFieldBegin(RANGE_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.range_info.size()));
            for (String _iter68 : struct.range_info)
            {
              oprot.writeString(_iter68);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_ids != null) {
        if (struct.isSetPartition_ids()) {
          oprot.writeFieldBegin(PARTITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.partition_ids.size()));
            for (int _iter69 : struct.partition_ids)
            {
              oprot.writeI32(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_partitions()) {
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI32(struct.num_partitions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_partition()) {
        oprot.writeFieldBegin(MAX_PARTITION_FIELD_DESC);
        oprot.writeI32(struct.max_partition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartitionInfoTupleSchemeFactory implements SchemeFactory {
    public PartitionInfoTupleScheme getScheme() {
      return new PartitionInfoTupleScheme();
    }
  }

  private static class PartitionInfoTupleScheme extends TupleScheme<PartitionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartitionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partition_columns.size());
        for (ColumnSchema _iter70 : struct.partition_columns)
        {
          _iter70.write(oprot);
        }
      }
      oprot.writeI32(struct.partition_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetList_info()) {
        optionals.set(0);
      }
      if (struct.isSetRange_info()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_ids()) {
        optionals.set(2);
      }
      if (struct.isSetNum_partitions()) {
        optionals.set(3);
      }
      if (struct.isSetMax_partition()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetList_info()) {
        {
          oprot.writeI32(struct.list_info.size());
          for (List<String> _iter71 : struct.list_info)
          {
            {
              oprot.writeI32(_iter71.size());
              for (String _iter72 : _iter71)
              {
                oprot.writeString(_iter72);
              }
            }
          }
        }
      }
      if (struct.isSetRange_info()) {
        {
          oprot.writeI32(struct.range_info.size());
          for (String _iter73 : struct.range_info)
          {
            oprot.writeString(_iter73);
          }
        }
      }
      if (struct.isSetPartition_ids()) {
        {
          oprot.writeI32(struct.partition_ids.size());
          for (int _iter74 : struct.partition_ids)
          {
            oprot.writeI32(_iter74);
          }
        }
      }
      if (struct.isSetNum_partitions()) {
        oprot.writeI32(struct.num_partitions);
      }
      if (struct.isSetMax_partition()) {
        oprot.writeI32(struct.max_partition);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartitionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partition_columns = new ArrayList<ColumnSchema>(_list75.size);
        ColumnSchema _elem76;
        for (int _i77 = 0; _i77 < _list75.size; ++_i77)
        {
          _elem76 = new ColumnSchema();
          _elem76.read(iprot);
          struct.partition_columns.add(_elem76);
        }
      }
      struct.setPartition_columnsIsSet(true);
      struct.partition_type = org.apache.carbondata.format.PartitionType.findByValue(iprot.readI32());
      struct.setPartition_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.list_info = new ArrayList<List<String>>(_list78.size);
          List<String> _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            {
              org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem79 = new ArrayList<String>(_list81.size);
              String _elem82;
              for (int _i83 = 0; _i83 < _list81.size; ++_i83)
              {
                _elem82 = iprot.readString();
                _elem79.add(_elem82);
              }
            }
            struct.list_info.add(_elem79);
          }
        }
        struct.setList_infoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.range_info = new ArrayList<String>(_list84.size);
          String _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = iprot.readString();
            struct.range_info.add(_elem85);
          }
        }
        struct.setRange_infoIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.partition_ids = new ArrayList<Integer>(_list87.size);
          int _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = iprot.readI32();
            struct.partition_ids.add(_elem88);
          }
        }
        struct.setPartition_idsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_partitions = iprot.readI32();
        struct.setNum_partitionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.max_partition = iprot.readI32();
        struct.setMax_partitionIsSet(true);
      }
    }
  }

}

